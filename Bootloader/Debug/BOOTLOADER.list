
BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003784  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a0  080039a0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080039a0  080039a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039a8  080039a8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080039b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000005c  08003a0c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08003a0c  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000098c1  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002141  00000000  00000000  00029990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000918  00000000  00000000  0002bad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ce  00000000  00000000  0002c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000166be  00000000  00000000  0002cabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bda9  00000000  00000000  0004317c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085a0d  00000000  00000000  0004ef25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002778  00000000  00000000  000d4934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000d70ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800390c 	.word	0x0800390c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800390c 	.word	0x0800390c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <bootloader_jump_to_user_app>:

/***
 * @brief -> this function is used after flashing a new firmware (application)
 * 			to jump from bootloader main into the application resethandler (entry of the application startupcode)
 */
static void bootloader_jump_to_user_app(void){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application */
	/*not required for now*/
	//uint32_t MSP_Value = *((volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS);

	/* Reset Handler definition function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4));
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <bootloader_jump_to_user_app+0x20>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	607b      	str	r3, [r7, #4]

	/* Fetch the reset handler address of the user application */
	pMainApp ResetHandler_Address = (pMainApp)MainAppAddr;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	603b      	str	r3, [r7, #0]
	/* Set Main Stack Pointer (it is not needed step the hardware on once you shift the ivt it init the msp by default after reset)*/
	//__set_MSP(MSP_Value);

	/* DeInitialize / Disable of modules */
	HAL_RCC_DeInit(); /* DeInitialize the RCC clock configuration to the default reset state. */
 800058c:	f001 ffe8 	bl	8002560 <HAL_RCC_DeInit>
	/* Disable Maskable Interrupt */

	/* Jump to Application Reset Handler */
	ResetHandler_Address();
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	4798      	blx	r3
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	08008004 	.word	0x08008004

080005a0 <BOOTLOADER_PRINT>:
 *@param string the string i want to print
 *@retval  HAL_StatusTypeDef return status (OK,ERROR,BUSY..etc)

 */
Std_ReturnType BOOTLOADER_PRINT(uint8_t * string,... )
{
 80005a0:	b40f      	push	{r0, r1, r2, r3}
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b09c      	sub	sp, #112	; 0x70
 80005a6:	af00      	add	r7, sp, #0
	Std_ReturnType Status=HAL_ERROR;
 80005a8:	2301      	movs	r3, #1
 80005aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	/*create a local buffer to save the string */
	uint8_t Local_Buff[100]={0};
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2260      	movs	r2, #96	; 0x60
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fd22 	bl	8003004 <memset>
	va_list args;
	va_start(args,string);
 80005c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005c4:	607b      	str	r3, [r7, #4]
	/*save the string into a local buffer*/
	vsprintf((char *)Local_Buff,(char *)string,args);
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fd0e 	bl	8002ff0 <vsiprintf>
	/*uart send this string*/
	Status=HAL_UART_Transmit(DEBUGGING_UART,(uint8_t *)Local_Buff,sizeof(Local_Buff),HAL_MAX_DELAY);
 80005d4:	f107 0108 	add.w	r1, r7, #8
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005dc:	2264      	movs	r2, #100	; 0x64
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <BOOTLOADER_PRINT+0x5c>)
 80005e0:	f002 f8d9 	bl	8002796 <HAL_UART_Transmit>
 80005e4:	4603      	mov	r3, r0
 80005e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	va_end(args);

	return Status;
 80005ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3770      	adds	r7, #112	; 0x70
 80005f2:	46bd      	mov	sp, r7
 80005f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005f8:	b004      	add	sp, #16
 80005fa:	4770      	bx	lr
 80005fc:	20000190 	.word	0x20000190

08000600 <BOOTLOADER_RECEIVE_COMMAND>:
/***
 * @brief -> this function is used to receive command from (HOST) (EARSEFLASH-WRITEONFLASH-GETBLVERSION)
 * @retval ->
 */
HAL_StatusTypeDef BOOTLOADER_RECEIVE_COMMAND(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	memset(HOST_BUFFER ,0,100 ) ;
 8000606:	2264      	movs	r2, #100	; 0x64
 8000608:	2100      	movs	r1, #0
 800060a:	4832      	ldr	r0, [pc, #200]	; (80006d4 <BOOTLOADER_RECEIVE_COMMAND+0xd4>)
 800060c:	f002 fcfa 	bl	8003004 <memset>
	uint8_t Data_Length = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	71bb      	strb	r3, [r7, #6]
	uint8_t COMMAND=0;
 8000614:	2300      	movs	r3, #0
 8000616:	717b      	strb	r3, [r7, #5]
	BL_Status Status = BL_NACK;
 8000618:	2300      	movs	r3, #0
 800061a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800061c:	2301      	movs	r3, #1
 800061e:	713b      	strb	r3, [r7, #4]
	/*receiving the incoming frame length(first byte of the frame always the length of the rest of frame) */
	HAL_Status = HAL_UART_Receive(COMMUNICATION_UART, HOST_BUFFER, 1, HAL_MAX_DELAY);
 8000620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000624:	2201      	movs	r2, #1
 8000626:	492b      	ldr	r1, [pc, #172]	; (80006d4 <BOOTLOADER_RECEIVE_COMMAND+0xd4>)
 8000628:	482b      	ldr	r0, [pc, #172]	; (80006d8 <BOOTLOADER_RECEIVE_COMMAND+0xd8>)
 800062a:	f002 f946 	bl	80028ba <HAL_UART_Receive>
 800062e:	4603      	mov	r3, r0
 8000630:	713b      	strb	r3, [r7, #4]
	/*check if uart receiving frame length process is oki*/
	if(HAL_Status != HAL_OK){
 8000632:	793b      	ldrb	r3, [r7, #4]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <BOOTLOADER_RECEIVE_COMMAND+0x3e>
		HAL_Status = HAL_ERROR;
 8000638:	2301      	movs	r3, #1
 800063a:	713b      	strb	r3, [r7, #4]
 800063c:	e044      	b.n	80006c8 <BOOTLOADER_RECEIVE_COMMAND+0xc8>
	}
	else{
		/*extract the rest frame length into a external variable*/
		Data_Length = HOST_BUFFER[0];
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <BOOTLOADER_RECEIVE_COMMAND+0xd4>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	71bb      	strb	r3, [r7, #6]

#if BOOT_LOADER_DEBUGGING_MODE == DEBUGGING_MODE_ENABLE
		BOOTLOADER_PRINT("You Received %d\r\n",Data_Length);
#endif
		HAL_Status = HAL_UART_Receive(COMMUNICATION_UART, &HOST_BUFFER[1], Data_Length, HAL_MAX_DELAY);
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	b29a      	uxth	r2, r3
 8000648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064c:	4923      	ldr	r1, [pc, #140]	; (80006dc <BOOTLOADER_RECEIVE_COMMAND+0xdc>)
 800064e:	4822      	ldr	r0, [pc, #136]	; (80006d8 <BOOTLOADER_RECEIVE_COMMAND+0xd8>)
 8000650:	f002 f933 	bl	80028ba <HAL_UART_Receive>
 8000654:	4603      	mov	r3, r0
 8000656:	713b      	strb	r3, [r7, #4]
		if(HAL_Status != HAL_OK){
 8000658:	793b      	ldrb	r3, [r7, #4]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <BOOTLOADER_RECEIVE_COMMAND+0x64>

#if BOOT_LOADER_DEBUGGING_MODE == DEBUGGING_MODE_ENABLE

			BOOTLOADER_PRINT("Bootloader Received Wrong Frame. \r\n");
#endif
			Status = HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	71fb      	strb	r3, [r7, #7]
 8000662:	e031      	b.n	80006c8 <BOOTLOADER_RECEIVE_COMMAND+0xc8>
		}
		else{
			/* Read the command packet received from the HOST */
			COMMAND=HOST_BUFFER[1];
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <BOOTLOADER_RECEIVE_COMMAND+0xd4>)
 8000666:	785b      	ldrb	r3, [r3, #1]
 8000668:	717b      	strb	r3, [r7, #5]
			switch(COMMAND)
 800066a:	797b      	ldrb	r3, [r7, #5]
 800066c:	3b10      	subs	r3, #16
 800066e:	2b06      	cmp	r3, #6
 8000670:	d826      	bhi.n	80006c0 <BOOTLOADER_RECEIVE_COMMAND+0xc0>
 8000672:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <BOOTLOADER_RECEIVE_COMMAND+0x78>)
 8000674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000678:	08000695 	.word	0x08000695
 800067c:	080006c1 	.word	0x080006c1
 8000680:	080006c1 	.word	0x080006c1
 8000684:	080006c1 	.word	0x080006c1
 8000688:	0800069d 	.word	0x0800069d
 800068c:	080006a9 	.word	0x080006a9
 8000690:	080006b5 	.word	0x080006b5

			case BOOT_LOADER_GET_VERSION:
#if BOOT_LOADER_DEBUGGING_MODE == DEBUGGING_MODE_ENABLE
				Status=BOOTLOADER_PRINT("You Received Get Version 0x%x\r\n",COMMAND);
#endif
				BOOTLOADER_SEND_VERSION_INFO(HOST_BUFFER);
 8000694:	480f      	ldr	r0, [pc, #60]	; (80006d4 <BOOTLOADER_RECEIVE_COMMAND+0xd4>)
 8000696:	f000 f825 	bl	80006e4 <BOOTLOADER_SEND_VERSION_INFO>
				break;
 800069a:	e015      	b.n	80006c8 <BOOTLOADER_RECEIVE_COMMAND+0xc8>
			case BOOT_LOADER_GO_TO_ADDR_CMD:
				Bootloader_Jump_To_Address(HOST_BUFFER);
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <BOOTLOADER_RECEIVE_COMMAND+0xd4>)
 800069e:	f000 f8ba 	bl	8000816 <Bootloader_Jump_To_Address>
				Status = BL_OK;
 80006a2:	2301      	movs	r3, #1
 80006a4:	71fb      	strb	r3, [r7, #7]
				break;
 80006a6:	e00f      	b.n	80006c8 <BOOTLOADER_RECEIVE_COMMAND+0xc8>
			case BOOT_LOADER_FLASH_ERASE_CMD:
				Bootloader_Erase_Flash(HOST_BUFFER);
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <BOOTLOADER_RECEIVE_COMMAND+0xd4>)
 80006aa:	f000 fa01 	bl	8000ab0 <Bootloader_Erase_Flash>
				Status = BL_OK;
 80006ae:	2301      	movs	r3, #1
 80006b0:	71fb      	strb	r3, [r7, #7]
				break;
 80006b2:	e009      	b.n	80006c8 <BOOTLOADER_RECEIVE_COMMAND+0xc8>
			case BOOT_LOADER_MEM_WRITE_CMD:
				Bootloader_Memory_Write(HOST_BUFFER);
 80006b4:	4807      	ldr	r0, [pc, #28]	; (80006d4 <BOOTLOADER_RECEIVE_COMMAND+0xd4>)
 80006b6:	f000 f84d 	bl	8000754 <Bootloader_Memory_Write>
				Status = BL_OK;
 80006ba:	2301      	movs	r3, #1
 80006bc:	71fb      	strb	r3, [r7, #7]
				break;
 80006be:	e003      	b.n	80006c8 <BOOTLOADER_RECEIVE_COMMAND+0xc8>
			default:
				BOOTLOADER_PRINT((uint8_t*)"Invalid command code received from host !! \r\n");
 80006c0:	4807      	ldr	r0, [pc, #28]	; (80006e0 <BOOTLOADER_RECEIVE_COMMAND+0xe0>)
 80006c2:	f7ff ff6d 	bl	80005a0 <BOOTLOADER_PRINT>
				break;
 80006c6:	bf00      	nop

			}
		}
	}

	return Status;
 80006c8:	79fb      	ldrb	r3, [r7, #7]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000078 	.word	0x20000078
 80006d8:	2000014c 	.word	0x2000014c
 80006dc:	20000079 	.word	0x20000079
 80006e0:	08003924 	.word	0x08003924

080006e4 <BOOTLOADER_SEND_VERSION_INFO>:
/***
 * @brief this function is used to send some basic info about bootloader
 *  	  1-MAJOR_VERSION  2-MINOR_VERSION  3-VENDOR_ID or the chip id
 */
void BOOTLOADER_SEND_VERSION_INFO(uint8_t *HOST_BUFF)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	/*the boot loader version inforamtion*/
	uint8_t BL_Version[4] = {MAJOR_VERSION, MINOR_VERSION,VENDOR_ID};
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	2301      	movs	r3, #1
 80006f2:	733b      	strb	r3, [r7, #12]
 80006f4:	2301      	movs	r3, #1
 80006f6:	737b      	strb	r3, [r7, #13]
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <BOOTLOADER_SEND_VERSION_INFO+0x6c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	73bb      	strb	r3, [r7, #14]
	uint32_t Host_CRC32=0;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
	/*calculate total frame length to calculate crc*/
	uint8_t Host_CMD_Packet_Len=HOST_BUFF[0] + 1;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	74fb      	strb	r3, [r7, #19]
	/*get the crc calculated by the host*/
	Host_CRC32 = *((uint32_t *)((HOST_BUFF + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 800070c:	7cfb      	ldrb	r3, [r7, #19]
 800070e:	3b04      	subs	r3, #4
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	617b      	str	r3, [r7, #20]
	/*calling the bootloader crc calculator api and then compare it to the received crc from host*/
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&HOST_BUFF[0] , Host_CMD_Packet_Len - 4, Host_CRC32))
 8000718:	7cfb      	ldrb	r3, [r7, #19]
 800071a:	3b04      	subs	r3, #4
 800071c:	697a      	ldr	r2, [r7, #20]
 800071e:	4619      	mov	r1, r3
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f8c1 	bl	80008a8 <Bootloader_CRC_Verify>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	d109      	bne.n	8000740 <BOOTLOADER_SEND_VERSION_INFO+0x5c>
	{
#if (BOOT_LOADER_DEBUGGING_MODE == DEBUGGING_MODE_ENABLE)
		BOOTLOADER_PRINT("CRC Verification Passed \r\n");
#endif
		/*sending acknowledge and send to host that bootloader information is 4 bytes so receive the 4 bytes*/
		Bootloader_Send_ACK(4);
 800072c:	2004      	movs	r0, #4
 800072e:	f000 f8f9 	bl	8000924 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)(&BL_Version[0]), 4);
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2104      	movs	r1, #4
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f91f 	bl	800097c <Bootloader_Send_Data_To_Host>
 800073e:	e001      	b.n	8000744 <BOOTLOADER_SEND_VERSION_INFO+0x60>
	else
	{
#if (BOOT_LOADER_DEBUGGING_MODE == DEBUG_INFO_ENABLE)
		BOOTLOADER_PRINT("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
 8000740:	f000 f90a 	bl	8000958 <Bootloader_Send_NACK>
	}
	/*it is here for testing after flashing purpose*/
	bootloader_jump_to_user_app();
 8000744:	f7ff ff1a 	bl	800057c <bootloader_jump_to_user_app>
}
 8000748:	bf00      	nop
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	e0042000 	.word	0xe0042000

08000754 <Bootloader_Memory_Write>:
/****************************************************************************************************/
/***
 * @brief this function is used to write data on the flash
 * @param *Host_Buffer -> pointer to the frame array which contain the data that is gonna be flashed
 */
void Bootloader_Memory_Write(uint8_t *Host_Buffer){
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
	/*creating a variable receive the start address that we gonna start flash from it*/
	uint32_t HOST_Address = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
	 * for example if hex file 1000 byte and we could flash up to 128 byte per calling
	 * so we gonna need 1000/128 = so gonna call the flash function 8 times
	 * and last time payload length may be less than 128 so we should know the length of data
	 * to extract it from data buffer */

	uint8_t Payload_Len = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	72fb      	strb	r3, [r7, #11]
	/*status that the sended address is valid place to flash a firmware in it*/
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 800076c:	2300      	movs	r3, #0
 800076e:	72bb      	strb	r3, [r7, #10]
	/*status that writing on flash is done on required way*/
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000770:	2300      	movs	r3, #0
 8000772:	727b      	strb	r3, [r7, #9]

#if (BOOT_LOADER_DEBUGGING_MODE == DEBUG_INFO_ENABLE)
	BOOTLOADER_PRINT("Write data into different memories of the MCU \r\n");
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b29b      	uxth	r3, r3
 800077a:	3301      	adds	r3, #1
 800077c:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 800077e:	8afb      	ldrh	r3, [r7, #22]
 8000780:	3b04      	subs	r3, #4
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 800078a:	8afb      	ldrh	r3, [r7, #22]
 800078c:	3b04      	subs	r3, #4
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	4619      	mov	r1, r3
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 f888 	bl	80008a8 <Bootloader_CRC_Verify>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d135      	bne.n	800080a <Bootloader_Memory_Write+0xb6>
#if (BOOT_LOADER_DEBUGGING_MODE == DEBUG_INFO_ENABLE)
		BOOTLOADER_PRINT("CRC Verification Passed \r\n");
#endif
		/* Send acknowledgement to the HOST */
		Bootloader_Send_ACK(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 f8c0 	bl	8000924 <Bootloader_Send_ACK>
		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80007aa:	60fb      	str	r3, [r7, #12]
#if (BOOT_LOADER_DEBUGGING_MODE == DEBUG_INFO_ENABLE)
		BOOTLOADER_PRINT("HOST_Address = 0x%X \r\n", HOST_Address);
#endif
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[6];
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	799b      	ldrb	r3, [r3, #6]
 80007b0:	72fb      	strb	r3, [r7, #11]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	f000 f8f6 	bl	80009a4 <Host_Address_Verification>
 80007b8:	4603      	mov	r3, r0
 80007ba:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification)
 80007bc:	7abb      	ldrb	r3, [r7, #10]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d11a      	bne.n	80007f8 <Bootloader_Memory_Write+0xa4>
		{
			/* Write the payload to the Flash memory */
			Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3307      	adds	r3, #7
 80007c6:	7afa      	ldrb	r2, [r7, #11]
 80007c8:	b292      	uxth	r2, r2
 80007ca:	68f9      	ldr	r1, [r7, #12]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f9b4 	bl	8000b3a <Flash_Memory_Write_Payload>
 80007d2:	4603      	mov	r3, r0
 80007d4:	727b      	strb	r3, [r7, #9]
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status)
 80007d6:	7a7b      	ldrb	r3, [r7, #9]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d106      	bne.n	80007ea <Bootloader_Memory_Write+0x96>
			{
				/*(like ACK) Report payload write passed */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 80007dc:	f107 0309 	add.w	r3, r7, #9
 80007e0:	2101      	movs	r1, #1
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f8ca 	bl	800097c <Bootloader_Send_Data_To_Host>
		BOOTLOADER_PRINT("CRC Verification Failed \r\n");
#endif
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 80007e8:	e011      	b.n	800080e <Bootloader_Memory_Write+0xba>
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 80007ea:	f107 0309 	add.w	r3, r7, #9
 80007ee:	2101      	movs	r1, #1
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f8c3 	bl	800097c <Bootloader_Send_Data_To_Host>
}
 80007f6:	e00a      	b.n	800080e <Bootloader_Memory_Write+0xba>
			Address_Verification = ADDRESS_IS_INVALID;
 80007f8:	2300      	movs	r3, #0
 80007fa:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 80007fc:	f107 030a 	add.w	r3, r7, #10
 8000800:	2101      	movs	r1, #1
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f8ba 	bl	800097c <Bootloader_Send_Data_To_Host>
}
 8000808:	e001      	b.n	800080e <Bootloader_Memory_Write+0xba>
		Bootloader_Send_NACK();
 800080a:	f000 f8a5 	bl	8000958 <Bootloader_Send_NACK>
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <Bootloader_Jump_To_Address>:
/*****************************************************************************************************/
/**
 * @brief -> this function is used to jump at aspecific address (like functions on application)
 */
static void Bootloader_Jump_To_Address(uint8_t *Host_Buffer){
 8000816:	b580      	push	{r7, lr}
 8000818:	b088      	sub	sp, #32
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	83fb      	strh	r3, [r7, #30]
	uint32_t Host_CRC32 = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
	uint32_t HOST_Jump_Address = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
#if (BOOT_LOADER_DEBUGGING_MODE == DEBUG_INFO_ENABLE)
	BOOTLOADER_PRINT("Jump bootloader to specified address \r\n");
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b29b      	uxth	r3, r3
 8000834:	3301      	adds	r3, #1
 8000836:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000838:	8bfb      	ldrh	r3, [r7, #30]
 800083a:	3b04      	subs	r3, #4
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4413      	add	r3, r2
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	61bb      	str	r3, [r7, #24]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000844:	8bfb      	ldrh	r3, [r7, #30]
 8000846:	3b04      	subs	r3, #4
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f82b 	bl	80008a8 <Bootloader_CRC_Verify>
 8000852:	4603      	mov	r3, r0
 8000854:	2b01      	cmp	r3, #1
 8000856:	d121      	bne.n	800089c <Bootloader_Jump_To_Address+0x86>
#if (BOOT_LOADER_DEBUGGING_MODE == DEBUG_INFO_ENABLE)
		BOOTLOADER_PRINT("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f000 f863 	bl	8000924 <Bootloader_Send_ACK>
		/* Extract the address form the HOST packet */
		HOST_Jump_Address = *((uint32_t *)&Host_Buffer[2]);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000864:	617b      	str	r3, [r7, #20]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Jump_Address);
 8000866:	6978      	ldr	r0, [r7, #20]
 8000868:	f000 f89c 	bl	80009a4 <Host_Address_Verification>
 800086c:	4603      	mov	r3, r0
 800086e:	73fb      	strb	r3, [r7, #15]
		if(ADDRESS_IS_VALID == Address_Verification){
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d10b      	bne.n	800088e <Bootloader_Jump_To_Address+0x78>
#if (BOOT_LOADER_DEBUGGING_MODE == DEBUG_INFO_ENABLE)
			BOOTLOADER_PRINT("Address verification succeeded \r\n");
#endif
			/* Report address verification succeeded */
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000876:	f107 030f 	add.w	r3, r7, #15
 800087a:	2101      	movs	r1, #1
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f87d 	bl	800097c <Bootloader_Send_Data_To_Host>
			/* Prepare the address to jump */
			Jump_Ptr Jump_Address = (Jump_Ptr)(HOST_Jump_Address + 1);
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	3301      	adds	r3, #1
 8000886:	613b      	str	r3, [r7, #16]
#if (BOOT_LOADER_DEBUGGING_MODE == DEBUG_INFO_ENABLE)
			BOOTLOADER_PRINT("Jump to : 0x%X \r\n", Jump_Address);
#endif
			Jump_Address();
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	4798      	blx	r3
#if (BOOT_LOADER_DEBUGGING_MODE == DEBUG_INFO_ENABLE)
		BOOTLOADER_PRINT("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 800088c:	e008      	b.n	80008a0 <Bootloader_Jump_To_Address+0x8a>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 800088e:	f107 030f 	add.w	r3, r7, #15
 8000892:	2101      	movs	r1, #1
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f871 	bl	800097c <Bootloader_Send_Data_To_Host>
}
 800089a:	e001      	b.n	80008a0 <Bootloader_Jump_To_Address+0x8a>
		Bootloader_Send_NACK();
 800089c:	f000 f85c 	bl	8000958 <Bootloader_Send_NACK>
}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <Bootloader_CRC_Verify>:
/****************************************************************************************************/
/***
 * @brief this function is used to check if crc received by host is the same crc
 * 		  that calulate on the received frame
 */
static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 80008b4:	2300      	movs	r3, #0
 80008b6:	77fb      	strb	r3, [r7, #31]
	/*calculated crc value on received data*/
	uint32_t MCU_CRC_Calculated = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
	/*counter to loop on the frame received bytes*/
	uint8_t Data_Counter = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	75fb      	strb	r3, [r7, #23]
	/*a buffer to extract the data from the array frame*/
	uint32_t Data_Buffer = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
	/* Calculate CRC32 */
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 80008c4:	2300      	movs	r3, #0
 80008c6:	75fb      	strb	r3, [r7, #23]
 80008c8:	e00f      	b.n	80008ea <Bootloader_CRC_Verify+0x42>
		Data_Buffer = (uint32_t)pData[Data_Counter];
 80008ca:	7dfb      	ldrb	r3, [r7, #23]
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	613b      	str	r3, [r7, #16]
		/*calling the CRC api to calculate the crc on the received frame */
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	2201      	movs	r2, #1
 80008da:	4619      	mov	r1, r3
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <Bootloader_CRC_Verify+0x78>)
 80008de:	f000 fd50 	bl	8001382 <HAL_CRC_Accumulate>
 80008e2:	61b8      	str	r0, [r7, #24]
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	3301      	adds	r3, #1
 80008e8:	75fb      	strb	r3, [r7, #23]
 80008ea:	7dfb      	ldrb	r3, [r7, #23]
 80008ec:	68ba      	ldr	r2, [r7, #8]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d8eb      	bhi.n	80008ca <Bootloader_CRC_Verify+0x22>
	}
	/* Reset the CRC Calculation Unit */
	__HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <Bootloader_CRC_Verify+0x78>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <Bootloader_CRC_Verify+0x78>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f042 0201 	orr.w	r2, r2, #1
 8000900:	609a      	str	r2, [r3, #8]
	/* Compare the Host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC){
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	429a      	cmp	r2, r3
 8000908:	d102      	bne.n	8000910 <Bootloader_CRC_Verify+0x68>
		CRC_Status = CRC_VERIFICATION_PASSED;
 800090a:	2301      	movs	r3, #1
 800090c:	77fb      	strb	r3, [r7, #31]
 800090e:	e001      	b.n	8000914 <Bootloader_CRC_Verify+0x6c>
	}
	else{
		CRC_Status = CRC_VERIFICATION_FAILED;
 8000910:	2300      	movs	r3, #0
 8000912:	77fb      	strb	r3, [r7, #31]
	}

	return CRC_Status;
 8000914:	7ffb      	ldrb	r3, [r7, #31]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000140 	.word	0x20000140

08000924 <Bootloader_Send_ACK>:
/***
 * @brief this function is used to send ack to host and the replied length if
 *  	 host asked a data like( get version info)
 *@param Replay_Len-> thelength of data that host asked bootloader for it
 */
static void Bootloader_Send_ACK(uint8_t Replay_Len){
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Value[2] = {0};
 800092e:	2300      	movs	r3, #0
 8000930:	81bb      	strh	r3, [r7, #12]
	Ack_Value[0] = CBL_SEND_ACK;
 8000932:	23cd      	movs	r3, #205	; 0xcd
 8000934:	733b      	strb	r3, [r7, #12]
	Ack_Value[1] = Replay_Len;
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(COMMUNICATION_UART, (uint8_t *)Ack_Value, 2, HAL_MAX_DELAY);
 800093a:	f107 010c 	add.w	r1, r7, #12
 800093e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000942:	2202      	movs	r2, #2
 8000944:	4803      	ldr	r0, [pc, #12]	; (8000954 <Bootloader_Send_ACK+0x30>)
 8000946:	f001 ff26 	bl	8002796 <HAL_UART_Transmit>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000014c 	.word	0x2000014c

08000958 <Bootloader_Send_NACK>:
/***
 * @brief this function is used to send not acknowlegment to the host
 */
static void Bootloader_Send_NACK(void){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	uint8_t Ack_Value = CBL_SEND_NACK;
 800095e:	23ab      	movs	r3, #171	; 0xab
 8000960:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(COMMUNICATION_UART, &Ack_Value, 1, HAL_MAX_DELAY);
 8000962:	1df9      	adds	r1, r7, #7
 8000964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000968:	2201      	movs	r2, #1
 800096a:	4803      	ldr	r0, [pc, #12]	; (8000978 <Bootloader_Send_NACK+0x20>)
 800096c:	f001 ff13 	bl	8002796 <HAL_UART_Transmit>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000014c 	.word	0x2000014c

0800097c <Bootloader_Send_Data_To_Host>:
/***
 * @brief this function is used to send data to the host through uart
 * @param Host_Buffer -> the data that bootloader gonna send
 * @param Data_Len -> the length of this data
 */
static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(COMMUNICATION_UART, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b29a      	uxth	r2, r3
 800098a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	4803      	ldr	r0, [pc, #12]	; (80009a0 <Bootloader_Send_Data_To_Host+0x24>)
 8000992:	f001 ff00 	bl	8002796 <HAL_UART_Transmit>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000014c 	.word	0x2000014c

080009a4 <Host_Address_Verification>:
 * 		  to flash firmware on it is valid (this function is used to verify flash only
 * 		  you could add sram address interval if you want to execute from flash
 * 		  also used to check if address that host asked to jump is valid or not
 * @param  Jump_Address -> the address that host send it
 */
static uint8_t Host_Address_Verification(uint32_t Jump_Address){
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]
	/*check if the address is located in flash intervals*/
	if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F401_FLASH_END)){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80009b6:	d306      	bcc.n	80009c6 <Host_Address_Verification+0x22>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <Host_Address_Verification+0x34>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d802      	bhi.n	80009c6 <Host_Address_Verification+0x22>
		Address_Verification = ADDRESS_IS_VALID;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	e001      	b.n	80009ca <Host_Address_Verification+0x26>
	}
	else{
		Address_Verification = ADDRESS_IS_INVALID;
 80009c6:	2300      	movs	r3, #0
 80009c8:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	08040000 	.word	0x08040000

080009dc <Perform_Flash_Erase>:
 * @brief this function is a helper function to (Bootloader_Erase_Flash() )used to erase the flash
 * @param Sector_Number -> start erase from this sector
 * @param Number_Of_Sectors-> how many sectors you want to erase
 * @retval Sector_Validity_Status-> return the status of erasing operation
 */
static uint8_t Perform_Flash_Erase(uint8_t Sector_Numebr, uint8_t Number_Of_Sectors){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	460a      	mov	r2, r1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	4613      	mov	r3, r2
 80009ea:	71bb      	strb	r3, [r7, #6]
	uint8_t Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;	/*a struct gonna take the erasing information like Mass erase or sector Erase.
 80009f2:	2301      	movs	r3, #1
 80009f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	 * Bank number , start secotr , number of sectors*/
	FLASH_EraseInitTypeDef pEraseInit;
	/*a variable used to verify number of sector sended by host
	 * =  (number of sectors - startsector)*/

	uint8_t Remaining_Sectors = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	/*flag status of sector erasing errors*/
	uint32_t SectorError = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
	/* check if Number Of sectors is out of range
	 * incase host send that he want to erase 12 sector
	 * and my flash has only 8 sector so it is out of range*/

	if(Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER){
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	2b08      	cmp	r3, #8
 8000a06:	d903      	bls.n	8000a10 <Perform_Flash_Erase+0x34>
		Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a0e:	e049      	b.n	8000aa4 <Perform_Flash_Erase+0xc8>
	}
	else{
		/*check if start sector is less than the maximum flash sector number or the host asked to erase the whole flash*/
		if((Sector_Numebr <= (CBL_FLASH_MAX_SECTOR_NUMBER - 1)) || (CBL_FLASH_MASS_ERASE == Sector_Numebr)){
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	2b07      	cmp	r3, #7
 8000a14:	d902      	bls.n	8000a1c <Perform_Flash_Erase+0x40>
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2bff      	cmp	r3, #255	; 0xff
 8000a1a:	d140      	bne.n	8000a9e <Perform_Flash_Erase+0xc2>
			/* Check if user needs Mass erase */
			if(CBL_FLASH_MASS_ERASE == Sector_Numebr){
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	2bff      	cmp	r3, #255	; 0xff
 8000a20:	d102      	bne.n	8000a28 <Perform_Flash_Erase+0x4c>
				/* Flash Mass erase activation */
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	e012      	b.n	8000a4e <Perform_Flash_Erase+0x72>
				BOOTLOADER_PRINT("User needs Sector erase \r\n");
#endif
				/* User needs Sector erase */
				/*calculate the remaining sectors and check if it is less of flash sector number*/

				Remaining_Sectors = CBL_FLASH_MAX_SECTOR_NUMBER - Sector_Numebr;
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f1c3 0308 	rsb	r3, r3, #8
 8000a2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				if(Number_Of_Sectors > Remaining_Sectors){
 8000a32:	79ba      	ldrb	r2, [r7, #6]
 8000a34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d902      	bls.n	8000a42 <Perform_Flash_Erase+0x66>
					/*if the remaining sector is less than the whole flash sectors
					 * so make the number of sectors gonna be erased is the remaining sectors*/
					Number_Of_Sectors = Remaining_Sectors;
 8000a3c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a40:	71bb      	strb	r3, [r7, #6]
				}
				else { /* Nothing */ }

				pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS; /* Sectors erase only */
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
				pEraseInit.Sector = Sector_Numebr;        /* Initial FLASH sector to erase when Mass erase is disabled */
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	61bb      	str	r3, [r7, #24]
				pEraseInit.NbSectors = Number_Of_Sectors; /* Number of sectors to be erased. */
 8000a4a:	79bb      	ldrb	r3, [r7, #6]
 8000a4c:	61fb      	str	r3, [r7, #28]
			}

			pEraseInit.Banks = FLASH_BANK_1; /* Bank 1  */
 8000a4e:	2301      	movs	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
			pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3; /* Device operating range: 2.7V to 3.6V */
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]

			/* Unlock the FLASH control register access */
			HAL_Status = HAL_FLASH_Unlock();
 8000a56:	f000 fd13 	bl	8001480 <HAL_FLASH_Unlock>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000a60:	f107 020c 	add.w	r2, r7, #12
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fe7a 	bl	8001764 <HAL_FLASHEx_Erase>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if(HAL_SUCCESSFUL_ERASE == SectorError){
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a7c:	d103      	bne.n	8000a86 <Perform_Flash_Erase+0xaa>
				Sector_Validity_Status = SUCCESSFUL_ERASE;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a84:	e005      	b.n	8000a92 <Perform_Flash_Erase+0xb6>

			}
			else{
				Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000a86:	2302      	movs	r3, #2
 8000a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				HAL_Status=HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
			/* Locks the FLASH control register access */
			HAL_Status = HAL_FLASH_Lock();
 8000a92:	f000 fd17 	bl	80014c4 <HAL_FLASH_Lock>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a9c:	e002      	b.n	8000aa4 <Perform_Flash_Erase+0xc8>

		}
		else{
			Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}
	return Sector_Validity_Status;
 8000aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <Bootloader_Erase_Flash>:
/***
 * @brief this function is used to erase flash
 * @param ->Host_Buffer -> the array that contatin the received command frame from host
 *
 */
static void Bootloader_Erase_Flash(uint8_t *Host_Buffer){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]

#if (BOOT_LOADER_DEBUGGING_MODE == DEBUGGING_MODE_ENABLE)
	BOOTLOADER_PRINT("Mass erase or sector erase of the user flash \r\n");
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	3301      	adds	r3, #1
 8000acc:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000ace:	8afb      	ldrh	r3, [r7, #22]
 8000ad0:	3b04      	subs	r3, #4
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000ada:	8afb      	ldrh	r3, [r7, #22]
 8000adc:	3b04      	subs	r3, #4
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fee0 	bl	80008a8 <Bootloader_CRC_Verify>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d11f      	bne.n	8000b2e <Bootloader_Erase_Flash+0x7e>
#if (BOOT_LOADER_DEBUGGING_MODE == DEBUGGING_MODE_ENABLE)
		BOOTLOADER_PRINT("CRC Verification Passed \r\n");
#endif
		/* Send acknowledgement to the HOST */
		Bootloader_Send_ACK(1);
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff ff18 	bl	8000924 <Bootloader_Send_ACK>
		/* Perform Mass erase or sector erase of the user flash */
		/*Host_Buffer[2]->Start_Sector , Host_Buffer[3]-> number of sectors*/
		Erase_Status = Perform_Flash_Erase(Host_Buffer[2], Host_Buffer[3]);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3302      	adds	r3, #2
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3303      	adds	r3, #3
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4610      	mov	r0, r2
 8000b04:	f7ff ff6a 	bl	80009dc <Perform_Flash_Erase>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	73fb      	strb	r3, [r7, #15]
		if(SUCCESSFUL_ERASE == Erase_Status){
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d106      	bne.n	8000b20 <Bootloader_Erase_Flash+0x70>
			/* Report erase Passed */
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000b12:	f107 030f 	add.w	r3, r7, #15
 8000b16:	2101      	movs	r1, #1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff2f 	bl	800097c <Bootloader_Send_Data_To_Host>
		BOOTLOADER_PRINT("CRC Verification Failed \r\n");
#endif
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 8000b1e:	e008      	b.n	8000b32 <Bootloader_Erase_Flash+0x82>
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000b20:	f107 030f 	add.w	r3, r7, #15
 8000b24:	2101      	movs	r1, #1
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff28 	bl	800097c <Bootloader_Send_Data_To_Host>
}
 8000b2c:	e001      	b.n	8000b32 <Bootloader_Erase_Flash+0x82>
		Bootloader_Send_NACK();
 8000b2e:	f7ff ff13 	bl	8000958 <Bootloader_Send_NACK>
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <Flash_Memory_Write_Payload>:
 * @param Host_Payload-> the data that host asked to write it on flash
 * @param Payload_Start_Address-> where the host asked bootloader to write this data
 * @param Payload_Len-> the length of this data
 * @retval Flash_Payload_Write_Status-> the status of the writing operation
 */
static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 8000b3a:	b5b0      	push	{r4, r5, r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	4613      	mov	r3, r2
 8000b46:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	75fb      	strb	r3, [r7, #23]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	75bb      	strb	r3, [r7, #22]
	uint16_t Payload_Counter = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	82bb      	strh	r3, [r7, #20]

	/* Unlock the FLASH control register access */
	HAL_Status = HAL_FLASH_Unlock();
 8000b54:	f000 fc94 	bl	8001480 <HAL_FLASH_Unlock>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	75fb      	strb	r3, [r7, #23]

	if(HAL_Status != HAL_OK){
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d002      	beq.n	8000b68 <Flash_Memory_Write_Payload+0x2e>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000b62:	2300      	movs	r3, #0
 8000b64:	75bb      	strb	r3, [r7, #22]
 8000b66:	e023      	b.n	8000bb0 <Flash_Memory_Write_Payload+0x76>
	}
	else{
		/*looping to write the whole payload (128 byte , 64byte , 256 byte depend on configuration of flash api (HAL_FLASH_Program())down there*/
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 8000b68:	2300      	movs	r3, #0
 8000b6a:	82bb      	strh	r3, [r7, #20]
 8000b6c:	e01c      	b.n	8000ba8 <Flash_Memory_Write_Payload+0x6e>
			/* Program a byte at a specified address */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Payload_Start_Address + Payload_Counter, Host_Payload[Payload_Counter]);
 8000b6e:	8aba      	ldrh	r2, [r7, #20]
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	18d1      	adds	r1, r2, r3
 8000b74:	8abb      	ldrh	r3, [r7, #20]
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	4413      	add	r3, r2
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2200      	movs	r2, #0
 8000b80:	461c      	mov	r4, r3
 8000b82:	4615      	mov	r5, r2
 8000b84:	4622      	mov	r2, r4
 8000b86:	462b      	mov	r3, r5
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 fc25 	bl	80013d8 <HAL_FLASH_Program>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	75fb      	strb	r3, [r7, #23]
			if(HAL_Status != HAL_OK){
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d002      	beq.n	8000b9e <Flash_Memory_Write_Payload+0x64>
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	75bb      	strb	r3, [r7, #22]
				break;
 8000b9c:	e008      	b.n	8000bb0 <Flash_Memory_Write_Payload+0x76>
			}
			else{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	75bb      	strb	r3, [r7, #22]
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 8000ba2:	8abb      	ldrh	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	82bb      	strh	r3, [r7, #20]
 8000ba8:	8aba      	ldrh	r2, [r7, #20]
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d3de      	bcc.n	8000b6e <Flash_Memory_Write_Payload+0x34>
			}
		}
	}

	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 8000bb0:	7dbb      	ldrb	r3, [r7, #22]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d10f      	bne.n	8000bd6 <Flash_Memory_Write_Payload+0x9c>
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10c      	bne.n	8000bd6 <Flash_Memory_Write_Payload+0x9c>
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 8000bbc:	f000 fc82 	bl	80014c4 <HAL_FLASH_Lock>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	75fb      	strb	r3, [r7, #23]
		if(HAL_Status != HAL_OK){
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <Flash_Memory_Write_Payload+0x96>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 8000bce:	e004      	b.n	8000bda <Flash_Memory_Write_Payload+0xa0>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 8000bd4:	e001      	b.n	8000bda <Flash_Memory_Write_Payload+0xa0>
		}
	}
	else{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	75bb      	strb	r3, [r7, #22]
	}

	return Flash_Payload_Write_Status;
 8000bda:	7dbb      	ldrb	r3, [r7, #22]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bdb0      	pop	{r4, r5, r7, pc}

08000be4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_CRC_Init+0x20>)
 8000bea:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <MX_CRC_Init+0x24>)
 8000bec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_CRC_Init+0x20>)
 8000bf0:	f000 fbab 	bl	800134a <HAL_CRC_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000bfa:	f000 f8b5 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000140 	.word	0x20000140
 8000c08:	40023000 	.word	0x40023000

08000c0c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <HAL_CRC_MspInit+0x3c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d10d      	bne.n	8000c3a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_CRC_MspInit+0x40>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <HAL_CRC_MspInit+0x40>)
 8000c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <HAL_CRC_MspInit+0x40>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023000 	.word	0x40023000
 8000c4c:	40023800 	.word	0x40023800

08000c50 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_GPIO_Init+0x30>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <MX_GPIO_Init+0x30>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_GPIO_Init+0x30>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c88:	f000 fa08 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8c:	f000 f80c 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c90:	f7ff ffde 	bl	8000c50 <MX_GPIO_Init>
  MX_CRC_Init();
 8000c94:	f7ff ffa6 	bl	8000be4 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000c98:	f000 f906 	bl	8000ea8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c9c:	f000 f92e 	bl	8000efc <MX_USART2_UART_Init>
	
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  BOOTLOADER_RECEIVE_COMMAND();
 8000ca0:	f7ff fcae 	bl	8000600 <BOOTLOADER_RECEIVE_COMMAND>
 8000ca4:	e7fc      	b.n	8000ca0 <main+0x1c>
	...

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	; 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0320 	add.w	r3, r7, #32
 8000cb2:	2230      	movs	r2, #48	; 0x30
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f002 f9a4 	bl	8003004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <SystemClock_Config+0xb8>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	4a22      	ldr	r2, [pc, #136]	; (8000d60 <SystemClock_Config+0xb8>)
 8000cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cda:	6413      	str	r3, [r2, #64]	; 0x40
 8000cdc:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <SystemClock_Config+0xb8>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <SystemClock_Config+0xbc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <SystemClock_Config+0xbc>)
 8000cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <SystemClock_Config+0xbc>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d10:	2310      	movs	r3, #16
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 ffc7 	bl	8001cb0 <HAL_RCC_OscConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d28:	f000 f81e 	bl	8000d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fa2a 	bl	80021a0 <HAL_RCC_ClockConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d52:	f000 f809 	bl	8000d68 <Error_Handler>
  }
}
 8000d56:	bf00      	nop
 8000d58:	3750      	adds	r7, #80	; 0x50
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40007000 	.word	0x40007000

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <Error_Handler+0x8>
	...

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 f996 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f002 f8e4 	bl	8003014 <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20010000 	.word	0x20010000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	20000148 	.word	0x20000148
 8000e80:	20000340 	.word	0x20000340

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_USART1_UART_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USART1_UART_Init+0x4c>)
 8000ee0:	f001 fc0c 	bl	80026fc <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eea:	f7ff ff3d 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000014c 	.word	0x2000014c
 8000ef8:	40011000 	.word	0x40011000

08000efc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <MX_USART2_UART_Init+0x50>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_USART2_UART_Init+0x4c>)
 8000f34:	f001 fbe2 	bl	80026fc <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f3e:	f7ff ff13 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000190 	.word	0x20000190
 8000f4c:	40004400 	.word	0x40004400

08000f50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a32      	ldr	r2, [pc, #200]	; (8001038 <HAL_UART_MspInit+0xe8>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d12d      	bne.n	8000fce <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	4b31      	ldr	r3, [pc, #196]	; (800103c <HAL_UART_MspInit+0xec>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a30      	ldr	r2, [pc, #192]	; (800103c <HAL_UART_MspInit+0xec>)
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b2e      	ldr	r3, [pc, #184]	; (800103c <HAL_UART_MspInit+0xec>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <HAL_UART_MspInit+0xec>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a29      	ldr	r2, [pc, #164]	; (800103c <HAL_UART_MspInit+0xec>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b27      	ldr	r3, [pc, #156]	; (800103c <HAL_UART_MspInit+0xec>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000faa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	481e      	ldr	r0, [pc, #120]	; (8001040 <HAL_UART_MspInit+0xf0>)
 8000fc8:	f000 fcee 	bl	80019a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fcc:	e030      	b.n	8001030 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a1c      	ldr	r2, [pc, #112]	; (8001044 <HAL_UART_MspInit+0xf4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d12b      	bne.n	8001030 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_UART_MspInit+0xec>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a16      	ldr	r2, [pc, #88]	; (800103c <HAL_UART_MspInit+0xec>)
 8000fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_UART_MspInit+0xec>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_UART_MspInit+0xec>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4a0f      	ldr	r2, [pc, #60]	; (800103c <HAL_UART_MspInit+0xec>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6313      	str	r3, [r2, #48]	; 0x30
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_UART_MspInit+0xec>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001010:	230c      	movs	r3, #12
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001020:	2307      	movs	r3, #7
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_UART_MspInit+0xf0>)
 800102c:	f000 fcbc 	bl	80019a8 <HAL_GPIO_Init>
}
 8001030:	bf00      	nop
 8001032:	3730      	adds	r7, #48	; 0x30
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40011000 	.word	0x40011000
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000
 8001044:	40004400 	.word	0x40004400

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104e:	490e      	ldr	r1, [pc, #56]	; (8001088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001064:	4c0b      	ldr	r4, [pc, #44]	; (8001094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001072:	f7ff ff07 	bl	8000e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f001 ffd3 	bl	8003020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fe03 	bl	8000c84 <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001080:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800108c:	080039b0 	.word	0x080039b0
  ldr r2, =_sbss
 8001090:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001094:	20000340 	.word	0x20000340

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f90d 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fe50 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f917 	bl	8001332 <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800111c:	f000 f8ed 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000000 	.word	0x20000000
 8001138:	20000008 	.word	0x20000008
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008
 8001164:	200001d4 	.word	0x200001d4

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	200001d4 	.word	0x200001d4

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff47 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff5c 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffb0 	bl	80012a0 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e00e      	b.n	800137a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	795b      	ldrb	r3, [r3, #5]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fc4d 	bl	8000c0c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001382:	b480      	push	{r7}
 8001384:	b087      	sub	sp, #28
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2202      	movs	r2, #2
 8001396:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e00a      	b.n	80013b4 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	441a      	add	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3f0      	bcc.n	800139e <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2201      	movs	r2, #1
 80013c8:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80013ca:	693b      	ldr	r3, [r7, #16]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	371c      	adds	r7, #28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <HAL_FLASH_Program+0xa0>)
 80013ec:	7e1b      	ldrb	r3, [r3, #24]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_FLASH_Program+0x1e>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e03b      	b.n	800146e <HAL_FLASH_Program+0x96>
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_FLASH_Program+0xa0>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001400:	f000 f870 	bl	80014e4 <FLASH_WaitForLastOperation>
 8001404:	4603      	mov	r3, r0
 8001406:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d12b      	bne.n	8001466 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001414:	783b      	ldrb	r3, [r7, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	68b8      	ldr	r0, [r7, #8]
 800141a:	f000 f91b 	bl	8001654 <FLASH_Program_Byte>
 800141e:	e016      	b.n	800144e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d105      	bne.n	8001432 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001426:	883b      	ldrh	r3, [r7, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	68b8      	ldr	r0, [r7, #8]
 800142c:	f000 f8ee 	bl	800160c <FLASH_Program_HalfWord>
 8001430:	e00d      	b.n	800144e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d105      	bne.n	8001444 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	68b8      	ldr	r0, [r7, #8]
 800143e:	f000 f8c3 	bl	80015c8 <FLASH_Program_Word>
 8001442:	e004      	b.n	800144e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001448:	68b8      	ldr	r0, [r7, #8]
 800144a:	f000 f88b 	bl	8001564 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800144e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001452:	f000 f847 	bl	80014e4 <FLASH_WaitForLastOperation>
 8001456:	4603      	mov	r3, r0
 8001458:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_FLASH_Program+0xa4>)
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_FLASH_Program+0xa4>)
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <HAL_FLASH_Program+0xa0>)
 8001468:	2200      	movs	r2, #0
 800146a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800146c:	7dfb      	ldrb	r3, [r7, #23]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200001d8 	.word	0x200001d8
 800147c:	40023c00 	.word	0x40023c00

08001480 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_FLASH_Unlock+0x38>)
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da0b      	bge.n	80014aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_FLASH_Unlock+0x38>)
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <HAL_FLASH_Unlock+0x3c>)
 8001496:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <HAL_FLASH_Unlock+0x38>)
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <HAL_FLASH_Unlock+0x40>)
 800149c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_FLASH_Unlock+0x38>)
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da01      	bge.n	80014aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40023c00 	.word	0x40023c00
 80014bc:	45670123 	.word	0x45670123
 80014c0:	cdef89ab 	.word	0xcdef89ab

080014c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_FLASH_Lock+0x1c>)
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_FLASH_Lock+0x1c>)
 80014ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014d2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <FLASH_WaitForLastOperation+0x78>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80014f6:	f7ff fe37 	bl	8001168 <HAL_GetTick>
 80014fa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80014fc:	e010      	b.n	8001520 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001504:	d00c      	beq.n	8001520 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <FLASH_WaitForLastOperation+0x38>
 800150c:	f7ff fe2c 	bl	8001168 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	d201      	bcs.n	8001520 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e019      	b.n	8001554 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <FLASH_WaitForLastOperation+0x7c>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1e8      	bne.n	80014fe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <FLASH_WaitForLastOperation+0x7c>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <FLASH_WaitForLastOperation+0x7c>)
 800153a:	2201      	movs	r2, #1
 800153c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <FLASH_WaitForLastOperation+0x7c>)
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800154a:	f000 f8a5 	bl	8001698 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
  
}  
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200001d8 	.word	0x200001d8
 8001560:	40023c00 	.word	0x40023c00

08001564 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <FLASH_Program_DoubleWord+0x60>)
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <FLASH_Program_DoubleWord+0x60>)
 8001576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800157a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <FLASH_Program_DoubleWord+0x60>)
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <FLASH_Program_DoubleWord+0x60>)
 8001582:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001586:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <FLASH_Program_DoubleWord+0x60>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <FLASH_Program_DoubleWord+0x60>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80015a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	000a      	movs	r2, r1
 80015ae:	2300      	movs	r3, #0
 80015b0:	68f9      	ldr	r1, [r7, #12]
 80015b2:	3104      	adds	r1, #4
 80015b4:	4613      	mov	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <FLASH_Program_Word+0x40>)
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <FLASH_Program_Word+0x40>)
 80015d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <FLASH_Program_Word+0x40>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <FLASH_Program_Word+0x40>)
 80015e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <FLASH_Program_Word+0x40>)
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <FLASH_Program_Word+0x40>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	601a      	str	r2, [r3, #0]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40023c00 	.word	0x40023c00

0800160c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <FLASH_Program_HalfWord+0x44>)
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <FLASH_Program_HalfWord+0x44>)
 800161e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001622:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <FLASH_Program_HalfWord+0x44>)
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	4a09      	ldr	r2, [pc, #36]	; (8001650 <FLASH_Program_HalfWord+0x44>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <FLASH_Program_HalfWord+0x44>)
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	4a06      	ldr	r2, [pc, #24]	; (8001650 <FLASH_Program_HalfWord+0x44>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	801a      	strh	r2, [r3, #0]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00

08001654 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <FLASH_Program_Byte+0x40>)
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <FLASH_Program_Byte+0x40>)
 8001666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800166a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <FLASH_Program_Byte+0x40>)
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <FLASH_Program_Byte+0x40>)
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <FLASH_Program_Byte+0x40>)
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	4a06      	ldr	r2, [pc, #24]	; (8001694 <FLASH_Program_Byte+0x40>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	701a      	strb	r2, [r3, #0]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00

08001698 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <FLASH_SetErrorCode+0xc4>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80016a8:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <FLASH_SetErrorCode+0xc8>)
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	f043 0310 	orr.w	r3, r3, #16
 80016b0:	4a2b      	ldr	r2, [pc, #172]	; (8001760 <FLASH_SetErrorCode+0xc8>)
 80016b2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <FLASH_SetErrorCode+0xc4>)
 80016b6:	2210      	movs	r2, #16
 80016b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80016ba:	4b28      	ldr	r3, [pc, #160]	; (800175c <FLASH_SetErrorCode+0xc4>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d008      	beq.n	80016d8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80016c6:	4b26      	ldr	r3, [pc, #152]	; (8001760 <FLASH_SetErrorCode+0xc8>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f043 0308 	orr.w	r3, r3, #8
 80016ce:	4a24      	ldr	r2, [pc, #144]	; (8001760 <FLASH_SetErrorCode+0xc8>)
 80016d0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <FLASH_SetErrorCode+0xc4>)
 80016d4:	2220      	movs	r2, #32
 80016d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <FLASH_SetErrorCode+0xc4>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d008      	beq.n	80016f6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <FLASH_SetErrorCode+0xc8>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	4a1c      	ldr	r2, [pc, #112]	; (8001760 <FLASH_SetErrorCode+0xc8>)
 80016ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <FLASH_SetErrorCode+0xc4>)
 80016f2:	2240      	movs	r2, #64	; 0x40
 80016f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <FLASH_SetErrorCode+0xc4>)
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d008      	beq.n	8001714 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <FLASH_SetErrorCode+0xc8>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <FLASH_SetErrorCode+0xc8>)
 800170c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800170e:	4b13      	ldr	r3, [pc, #76]	; (800175c <FLASH_SetErrorCode+0xc4>)
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <FLASH_SetErrorCode+0xc4>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d009      	beq.n	8001734 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <FLASH_SetErrorCode+0xc8>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <FLASH_SetErrorCode+0xc8>)
 800172a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <FLASH_SetErrorCode+0xc4>)
 800172e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001732:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <FLASH_SetErrorCode+0xc4>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <FLASH_SetErrorCode+0xc8>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	f043 0320 	orr.w	r3, r3, #32
 8001748:	4a05      	ldr	r2, [pc, #20]	; (8001760 <FLASH_SetErrorCode+0xc8>)
 800174a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <FLASH_SetErrorCode+0xc4>)
 800174e:	2202      	movs	r2, #2
 8001750:	60da      	str	r2, [r3, #12]
  }
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40023c00 	.word	0x40023c00
 8001760:	200001d8 	.word	0x200001d8

08001764 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <HAL_FLASHEx_Erase+0xd8>)
 8001778:	7e1b      	ldrb	r3, [r3, #24]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <HAL_FLASHEx_Erase+0x1e>
 800177e:	2302      	movs	r3, #2
 8001780:	e058      	b.n	8001834 <HAL_FLASHEx_Erase+0xd0>
 8001782:	4b2e      	ldr	r3, [pc, #184]	; (800183c <HAL_FLASHEx_Erase+0xd8>)
 8001784:	2201      	movs	r2, #1
 8001786:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001788:	f24c 3050 	movw	r0, #50000	; 0xc350
 800178c:	f7ff feaa 	bl	80014e4 <FLASH_WaitForLastOperation>
 8001790:	4603      	mov	r3, r0
 8001792:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d148      	bne.n	800182c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d115      	bne.n	80017d6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f000 f844 	bl	8001844 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017c0:	f7ff fe90 	bl	80014e4 <FLASH_WaitForLastOperation>
 80017c4:	4603      	mov	r3, r0
 80017c6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <HAL_FLASHEx_Erase+0xdc>)
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <HAL_FLASHEx_Erase+0xdc>)
 80017ce:	f023 0304 	bic.w	r3, r3, #4
 80017d2:	6113      	str	r3, [r2, #16]
 80017d4:	e028      	b.n	8001828 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	e01c      	b.n	8001818 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	4619      	mov	r1, r3
 80017e6:	68b8      	ldr	r0, [r7, #8]
 80017e8:	f000 f850 	bl	800188c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017f0:	f7ff fe78 	bl	80014e4 <FLASH_WaitForLastOperation>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_FLASHEx_Erase+0xdc>)
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	4a10      	ldr	r2, [pc, #64]	; (8001840 <HAL_FLASHEx_Erase+0xdc>)
 80017fe:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001802:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	601a      	str	r2, [r3, #0]
          break;
 8001810:	e00a      	b.n	8001828 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	3301      	adds	r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4413      	add	r3, r2
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	429a      	cmp	r2, r3
 8001826:	d3da      	bcc.n	80017de <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001828:	f000 f878 	bl	800191c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_FLASHEx_Erase+0xd8>)
 800182e:	2200      	movs	r2, #0
 8001830:	761a      	strb	r2, [r3, #24]

  return status;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200001d8 	.word	0x200001d8
 8001840:	40023c00 	.word	0x40023c00

08001844 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <FLASH_MassErase+0x44>)
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <FLASH_MassErase+0x44>)
 8001856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800185a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <FLASH_MassErase+0x44>)
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	4a09      	ldr	r2, [pc, #36]	; (8001888 <FLASH_MassErase+0x44>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <FLASH_MassErase+0x44>)
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	4313      	orrs	r3, r2
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <FLASH_MassErase+0x44>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001878:	6113      	str	r3, [r2, #16]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40023c00 	.word	0x40023c00

0800188c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	e010      	b.n	80018ca <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d103      	bne.n	80018b6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80018ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e009      	b.n	80018ca <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d103      	bne.n	80018c4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80018bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	e002      	b.n	80018ca <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80018c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <FLASH_Erase_Sector+0x8c>)
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <FLASH_Erase_Sector+0x8c>)
 80018d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <FLASH_Erase_Sector+0x8c>)
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	490f      	ldr	r1, [pc, #60]	; (8001918 <FLASH_Erase_Sector+0x8c>)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <FLASH_Erase_Sector+0x8c>)
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <FLASH_Erase_Sector+0x8c>)
 80018e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <FLASH_Erase_Sector+0x8c>)
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <FLASH_Erase_Sector+0x8c>)
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <FLASH_Erase_Sector+0x8c>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <FLASH_Erase_Sector+0x8c>)
 8001906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190a:	6113      	str	r3, [r2, #16]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40023c00 	.word	0x40023c00

0800191c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <FLASH_FlushCaches+0x88>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001928:	2b00      	cmp	r3, #0
 800192a:	d017      	beq.n	800195c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <FLASH_FlushCaches+0x88>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <FLASH_FlushCaches+0x88>)
 8001932:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001936:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <FLASH_FlushCaches+0x88>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <FLASH_FlushCaches+0x88>)
 800193e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <FLASH_FlushCaches+0x88>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <FLASH_FlushCaches+0x88>)
 800194a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800194e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <FLASH_FlushCaches+0x88>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <FLASH_FlushCaches+0x88>)
 8001956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <FLASH_FlushCaches+0x88>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001964:	2b00      	cmp	r3, #0
 8001966:	d017      	beq.n	8001998 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001968:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <FLASH_FlushCaches+0x88>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <FLASH_FlushCaches+0x88>)
 800196e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001972:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <FLASH_FlushCaches+0x88>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <FLASH_FlushCaches+0x88>)
 800197a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <FLASH_FlushCaches+0x88>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <FLASH_FlushCaches+0x88>)
 8001986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800198a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <FLASH_FlushCaches+0x88>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <FLASH_FlushCaches+0x88>)
 8001992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001996:	6013      	str	r3, [r2, #0]
  }
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023c00 	.word	0x40023c00

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e159      	b.n	8001c78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c4:	2201      	movs	r2, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	429a      	cmp	r2, r3
 80019de:	f040 8148 	bne.w	8001c72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d005      	beq.n	80019fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d130      	bne.n	8001a5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 0201 	and.w	r2, r3, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d017      	beq.n	8001a98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d123      	bne.n	8001aec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	08da      	lsrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3208      	adds	r2, #8
 8001ae6:	69b9      	ldr	r1, [r7, #24]
 8001ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80a2 	beq.w	8001c72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b57      	ldr	r3, [pc, #348]	; (8001c90 <HAL_GPIO_Init+0x2e8>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4a56      	ldr	r2, [pc, #344]	; (8001c90 <HAL_GPIO_Init+0x2e8>)
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	4b54      	ldr	r3, [pc, #336]	; (8001c90 <HAL_GPIO_Init+0x2e8>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4a:	4a52      	ldr	r2, [pc, #328]	; (8001c94 <HAL_GPIO_Init+0x2ec>)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a49      	ldr	r2, [pc, #292]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d019      	beq.n	8001baa <HAL_GPIO_Init+0x202>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a48      	ldr	r2, [pc, #288]	; (8001c9c <HAL_GPIO_Init+0x2f4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_GPIO_Init+0x1fe>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a47      	ldr	r2, [pc, #284]	; (8001ca0 <HAL_GPIO_Init+0x2f8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00d      	beq.n	8001ba2 <HAL_GPIO_Init+0x1fa>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a46      	ldr	r2, [pc, #280]	; (8001ca4 <HAL_GPIO_Init+0x2fc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x1f6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a45      	ldr	r2, [pc, #276]	; (8001ca8 <HAL_GPIO_Init+0x300>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_GPIO_Init+0x1f2>
 8001b96:	2304      	movs	r3, #4
 8001b98:	e008      	b.n	8001bac <HAL_GPIO_Init+0x204>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x204>
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e004      	b.n	8001bac <HAL_GPIO_Init+0x204>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e002      	b.n	8001bac <HAL_GPIO_Init+0x204>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x204>
 8001baa:	2300      	movs	r3, #0
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f002 0203 	and.w	r2, r2, #3
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	4093      	lsls	r3, r2
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bbc:	4935      	ldr	r1, [pc, #212]	; (8001c94 <HAL_GPIO_Init+0x2ec>)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bca:	4b38      	ldr	r3, [pc, #224]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bee:	4a2f      	ldr	r2, [pc, #188]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c18:	4a24      	ldr	r2, [pc, #144]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c1e:	4b23      	ldr	r3, [pc, #140]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c42:	4a1a      	ldr	r2, [pc, #104]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c6c:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3301      	adds	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	f67f aea2 	bls.w	80019c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40013800 	.word	0x40013800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40013c00 	.word	0x40013c00

08001cb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e267      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d075      	beq.n	8001dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cce:	4b88      	ldr	r3, [pc, #544]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d00c      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cda:	4b85      	ldr	r3, [pc, #532]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d112      	bne.n	8001d0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ce6:	4b82      	ldr	r3, [pc, #520]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cf2:	d10b      	bne.n	8001d0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	4b7e      	ldr	r3, [pc, #504]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d05b      	beq.n	8001db8 <HAL_RCC_OscConfig+0x108>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d157      	bne.n	8001db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e242      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d14:	d106      	bne.n	8001d24 <HAL_RCC_OscConfig+0x74>
 8001d16:	4b76      	ldr	r3, [pc, #472]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a75      	ldr	r2, [pc, #468]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e01d      	b.n	8001d60 <HAL_RCC_OscConfig+0xb0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x98>
 8001d2e:	4b70      	ldr	r3, [pc, #448]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6f      	ldr	r2, [pc, #444]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	4b6d      	ldr	r3, [pc, #436]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a6c      	ldr	r2, [pc, #432]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0xb0>
 8001d48:	4b69      	ldr	r3, [pc, #420]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a68      	ldr	r2, [pc, #416]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b66      	ldr	r3, [pc, #408]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a65      	ldr	r2, [pc, #404]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d013      	beq.n	8001d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff f9fe 	bl	8001168 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff f9fa 	bl	8001168 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e207      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	4b5b      	ldr	r3, [pc, #364]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0xc0>
 8001d8e:	e014      	b.n	8001dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff f9ea 	bl	8001168 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff f9e6 	bl	8001168 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e1f3      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	4b51      	ldr	r3, [pc, #324]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0xe8>
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d063      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dc6:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00b      	beq.n	8001dea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dd2:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d11c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dde:	4b44      	ldr	r3, [pc, #272]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d116      	bne.n	8001e18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x152>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e1c7      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4937      	ldr	r1, [pc, #220]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	e03a      	b.n	8001e8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d020      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e20:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <HAL_RCC_OscConfig+0x244>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7ff f99f 	bl	8001168 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7ff f99b 	bl	8001168 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e1a8      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4925      	ldr	r1, [pc, #148]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]
 8001e60:	e015      	b.n	8001e8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <HAL_RCC_OscConfig+0x244>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7ff f97e 	bl	8001168 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e70:	f7ff f97a 	bl	8001168 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e187      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e82:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d036      	beq.n	8001f08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d016      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_RCC_OscConfig+0x248>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7ff f95e 	bl	8001168 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7ff f95a 	bl	8001168 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e167      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x200>
 8001ece:	e01b      	b.n	8001f08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_OscConfig+0x248>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff f947 	bl	8001168 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001edc:	e00e      	b.n	8001efc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ede:	f7ff f943 	bl	8001168 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d907      	bls.n	8001efc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e150      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	42470000 	.word	0x42470000
 8001ef8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	4b88      	ldr	r3, [pc, #544]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1ea      	bne.n	8001ede <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 8097 	beq.w	8002044 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1a:	4b81      	ldr	r3, [pc, #516]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10f      	bne.n	8001f46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	4b7d      	ldr	r3, [pc, #500]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a7c      	ldr	r2, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b7a      	ldr	r3, [pc, #488]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f42:	2301      	movs	r3, #1
 8001f44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f46:	4b77      	ldr	r3, [pc, #476]	; (8002124 <HAL_RCC_OscConfig+0x474>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d118      	bne.n	8001f84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f52:	4b74      	ldr	r3, [pc, #464]	; (8002124 <HAL_RCC_OscConfig+0x474>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a73      	ldr	r2, [pc, #460]	; (8002124 <HAL_RCC_OscConfig+0x474>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff f903 	bl	8001168 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7ff f8ff 	bl	8001168 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e10c      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_OscConfig+0x474>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d106      	bne.n	8001f9a <HAL_RCC_OscConfig+0x2ea>
 8001f8c:	4b64      	ldr	r3, [pc, #400]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	4a63      	ldr	r2, [pc, #396]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6713      	str	r3, [r2, #112]	; 0x70
 8001f98:	e01c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x324>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d10c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x30c>
 8001fa2:	4b5f      	ldr	r3, [pc, #380]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa6:	4a5e      	ldr	r2, [pc, #376]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6713      	str	r3, [r2, #112]	; 0x70
 8001fae:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	4a5b      	ldr	r2, [pc, #364]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fba:	e00b      	b.n	8001fd4 <HAL_RCC_OscConfig+0x324>
 8001fbc:	4b58      	ldr	r3, [pc, #352]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	4a57      	ldr	r2, [pc, #348]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc8:	4b55      	ldr	r3, [pc, #340]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	4a54      	ldr	r2, [pc, #336]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001fce:	f023 0304 	bic.w	r3, r3, #4
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d015      	beq.n	8002008 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fdc:	f7ff f8c4 	bl	8001168 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe4:	f7ff f8c0 	bl	8001168 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e0cb      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffa:	4b49      	ldr	r3, [pc, #292]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0ee      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x334>
 8002006:	e014      	b.n	8002032 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002008:	f7ff f8ae 	bl	8001168 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002010:	f7ff f8aa 	bl	8001168 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e0b5      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002026:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ee      	bne.n	8002010 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002032:	7dfb      	ldrb	r3, [r7, #23]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d105      	bne.n	8002044 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002038:	4b39      	ldr	r3, [pc, #228]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	4a38      	ldr	r2, [pc, #224]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 800203e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002042:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80a1 	beq.w	8002190 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800204e:	4b34      	ldr	r3, [pc, #208]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b08      	cmp	r3, #8
 8002058:	d05c      	beq.n	8002114 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d141      	bne.n	80020e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002062:	4b31      	ldr	r3, [pc, #196]	; (8002128 <HAL_RCC_OscConfig+0x478>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff f87e 	bl	8001168 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002070:	f7ff f87a 	bl	8001168 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e087      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002082:	4b27      	ldr	r3, [pc, #156]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69da      	ldr	r2, [r3, #28]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	019b      	lsls	r3, r3, #6
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	085b      	lsrs	r3, r3, #1
 80020a6:	3b01      	subs	r3, #1
 80020a8:	041b      	lsls	r3, r3, #16
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	061b      	lsls	r3, r3, #24
 80020b2:	491b      	ldr	r1, [pc, #108]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_RCC_OscConfig+0x478>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7ff f853 	bl	8001168 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c6:	f7ff f84f 	bl	8001168 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e05c      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x416>
 80020e4:	e054      	b.n	8002190 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <HAL_RCC_OscConfig+0x478>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff f83c 	bl	8001168 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f4:	f7ff f838 	bl	8001168 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e045      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_RCC_OscConfig+0x470>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f0      	bne.n	80020f4 <HAL_RCC_OscConfig+0x444>
 8002112:	e03d      	b.n	8002190 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d107      	bne.n	800212c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e038      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
 8002120:	40023800 	.word	0x40023800
 8002124:	40007000 	.word	0x40007000
 8002128:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800212c:	4b1b      	ldr	r3, [pc, #108]	; (800219c <HAL_RCC_OscConfig+0x4ec>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d028      	beq.n	800218c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d121      	bne.n	800218c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d11a      	bne.n	800218c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800215c:	4013      	ands	r3, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002162:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002164:	4293      	cmp	r3, r2
 8002166:	d111      	bne.n	800218c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	085b      	lsrs	r3, r3, #1
 8002174:	3b01      	subs	r3, #1
 8002176:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d107      	bne.n	800218c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800

080021a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0cc      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b4:	4b68      	ldr	r3, [pc, #416]	; (8002358 <HAL_RCC_ClockConfig+0x1b8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d90c      	bls.n	80021dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b65      	ldr	r3, [pc, #404]	; (8002358 <HAL_RCC_ClockConfig+0x1b8>)
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b63      	ldr	r3, [pc, #396]	; (8002358 <HAL_RCC_ClockConfig+0x1b8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0b8      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d020      	beq.n	800222a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f4:	4b59      	ldr	r3, [pc, #356]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4a58      	ldr	r2, [pc, #352]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800220c:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	4a52      	ldr	r2, [pc, #328]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002218:	4b50      	ldr	r3, [pc, #320]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	494d      	ldr	r1, [pc, #308]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	4313      	orrs	r3, r2
 8002228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d044      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b47      	ldr	r3, [pc, #284]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d119      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e07f      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d003      	beq.n	800225e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800225a:	2b03      	cmp	r3, #3
 800225c:	d107      	bne.n	800226e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225e:	4b3f      	ldr	r3, [pc, #252]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d109      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e06f      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226e:	4b3b      	ldr	r3, [pc, #236]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e067      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227e:	4b37      	ldr	r3, [pc, #220]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f023 0203 	bic.w	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4934      	ldr	r1, [pc, #208]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	4313      	orrs	r3, r2
 800228e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002290:	f7fe ff6a 	bl	8001168 <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	e00a      	b.n	80022ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7fe ff66 	bl	8001168 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e04f      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 020c 	and.w	r2, r3, #12
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	429a      	cmp	r2, r3
 80022be:	d1eb      	bne.n	8002298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c0:	4b25      	ldr	r3, [pc, #148]	; (8002358 <HAL_RCC_ClockConfig+0x1b8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d20c      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e032      	b.n	800234e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4916      	ldr	r1, [pc, #88]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	490e      	ldr	r1, [pc, #56]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002326:	f000 f821 	bl	800236c <HAL_RCC_GetSysClockFreq>
 800232a:	4602      	mov	r2, r0
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	490a      	ldr	r1, [pc, #40]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	5ccb      	ldrb	r3, [r1, r3]
 800233a:	fa22 f303 	lsr.w	r3, r2, r3
 800233e:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe feca 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023c00 	.word	0x40023c00
 800235c:	40023800 	.word	0x40023800
 8002360:	08003954 	.word	0x08003954
 8002364:	20000000 	.word	0x20000000
 8002368:	20000004 	.word	0x20000004

0800236c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002370:	b090      	sub	sp, #64	; 0x40
 8002372:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	637b      	str	r3, [r7, #52]	; 0x34
 8002378:	2300      	movs	r3, #0
 800237a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800237c:	2300      	movs	r3, #0
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002384:	4b59      	ldr	r3, [pc, #356]	; (80024ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b08      	cmp	r3, #8
 800238e:	d00d      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0x40>
 8002390:	2b08      	cmp	r3, #8
 8002392:	f200 80a1 	bhi.w	80024d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x34>
 800239a:	2b04      	cmp	r3, #4
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800239e:	e09b      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023a0:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80023a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80023a4:	e09b      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023a6:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80023a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023aa:	e098      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ac:	4b4f      	ldr	r3, [pc, #316]	; (80024ec <HAL_RCC_GetSysClockFreq+0x180>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023b6:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCC_GetSysClockFreq+0x180>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d028      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c2:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_GetSysClockFreq+0x180>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	099b      	lsrs	r3, r3, #6
 80023c8:	2200      	movs	r2, #0
 80023ca:	623b      	str	r3, [r7, #32]
 80023cc:	627a      	str	r2, [r7, #36]	; 0x24
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023d4:	2100      	movs	r1, #0
 80023d6:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80023d8:	fb03 f201 	mul.w	r2, r3, r1
 80023dc:	2300      	movs	r3, #0
 80023de:	fb00 f303 	mul.w	r3, r0, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	4a43      	ldr	r2, [pc, #268]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80023e6:	fba0 1202 	umull	r1, r2, r0, r2
 80023ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023ec:	460a      	mov	r2, r1
 80023ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80023f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f2:	4413      	add	r3, r2
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	2200      	movs	r2, #0
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	61fa      	str	r2, [r7, #28]
 80023fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002402:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002406:	f7fd ff3b 	bl	8000280 <__aeabi_uldivmod>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4613      	mov	r3, r2
 8002410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002412:	e053      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002414:	4b35      	ldr	r3, [pc, #212]	; (80024ec <HAL_RCC_GetSysClockFreq+0x180>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	2200      	movs	r2, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	617a      	str	r2, [r7, #20]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002426:	f04f 0b00 	mov.w	fp, #0
 800242a:	4652      	mov	r2, sl
 800242c:	465b      	mov	r3, fp
 800242e:	f04f 0000 	mov.w	r0, #0
 8002432:	f04f 0100 	mov.w	r1, #0
 8002436:	0159      	lsls	r1, r3, #5
 8002438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800243c:	0150      	lsls	r0, r2, #5
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	ebb2 080a 	subs.w	r8, r2, sl
 8002446:	eb63 090b 	sbc.w	r9, r3, fp
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002456:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800245a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800245e:	ebb2 0408 	subs.w	r4, r2, r8
 8002462:	eb63 0509 	sbc.w	r5, r3, r9
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	00eb      	lsls	r3, r5, #3
 8002470:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002474:	00e2      	lsls	r2, r4, #3
 8002476:	4614      	mov	r4, r2
 8002478:	461d      	mov	r5, r3
 800247a:	eb14 030a 	adds.w	r3, r4, sl
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	eb45 030b 	adc.w	r3, r5, fp
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002492:	4629      	mov	r1, r5
 8002494:	028b      	lsls	r3, r1, #10
 8002496:	4621      	mov	r1, r4
 8002498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800249c:	4621      	mov	r1, r4
 800249e:	028a      	lsls	r2, r1, #10
 80024a0:	4610      	mov	r0, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a6:	2200      	movs	r2, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	60fa      	str	r2, [r7, #12]
 80024ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024b0:	f7fd fee6 	bl	8000280 <__aeabi_uldivmod>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4613      	mov	r3, r2
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_RCC_GetSysClockFreq+0x180>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	0c1b      	lsrs	r3, r3, #16
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	3301      	adds	r3, #1
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80024cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024d6:	e002      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80024da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3740      	adds	r7, #64	; 0x40
 80024e4:	46bd      	mov	sp, r7
 80024e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	00f42400 	.word	0x00f42400
 80024f4:	017d7840 	.word	0x017d7840

080024f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <HAL_RCC_GetHCLKFreq+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000000 	.word	0x20000000

08002510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002514:	f7ff fff0 	bl	80024f8 <HAL_RCC_GetHCLKFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	0a9b      	lsrs	r3, r3, #10
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	4903      	ldr	r1, [pc, #12]	; (8002534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	08003964 	.word	0x08003964

08002538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800253c:	f7ff ffdc 	bl	80024f8 <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	0b5b      	lsrs	r3, r3, #13
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4903      	ldr	r1, [pc, #12]	; (800255c <HAL_RCC_GetPCLK2Freq+0x24>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40023800 	.word	0x40023800
 800255c:	08003964 	.word	0x08003964

08002560 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002566:	f7fe fdff 	bl	8001168 <HAL_GetTick>
 800256a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800256c:	4b5d      	ldr	r3, [pc, #372]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a5c      	ldr	r2, [pc, #368]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257a:	f7fe fdf5 	bl	8001168 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0a7      	b.n	80026dc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800258c:	4b55      	ldr	r3, [pc, #340]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002598:	4b52      	ldr	r3, [pc, #328]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a51      	ldr	r2, [pc, #324]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 800259e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80025a4:	f7fe fde0 	bl	8001168 <HAL_GetTick>
 80025a8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80025aa:	4b4e      	ldr	r3, [pc, #312]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b2:	f7fe fdd9 	bl	8001168 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e089      	b.n	80026dc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80025c8:	4b46      	ldr	r3, [pc, #280]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1ee      	bne.n	80025b2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80025d4:	f7fe fdc8 	bl	8001168 <HAL_GetTick>
 80025d8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80025da:	4b42      	ldr	r3, [pc, #264]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a41      	ldr	r2, [pc, #260]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 80025e0:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80025e4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe fdbe 	bl	8001168 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e070      	b.n	80026dc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80025fa:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002606:	f7fe fdaf 	bl	8001168 <HAL_GetTick>
 800260a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a34      	ldr	r2, [pc, #208]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 8002612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261a:	f7fe fda5 	bl	8001168 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e057      	b.n	80026dc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800262c:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002638:	f7fe fd96 	bl	8001168 <HAL_GetTick>
 800263c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800263e:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 8002644:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002648:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800264c:	f7fe fd8c 	bl	8001168 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e03e      	b.n	80026dc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800265e:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800266a:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 800266c:	4a1e      	ldr	r2, [pc, #120]	; (80026e8 <HAL_RCC_DeInit+0x188>)
 800266e:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 8002672:	4a1e      	ldr	r2, [pc, #120]	; (80026ec <HAL_RCC_DeInit+0x18c>)
 8002674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 800267e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002682:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002684:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 800268a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800268e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4a13      	ldr	r2, [pc, #76]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 8002696:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800269a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 80026a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026a6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 80026aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ac:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 80026b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b8:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <HAL_RCC_DeInit+0x184>)
 80026ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026be:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_DeInit+0x190>)
 80026c2:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <HAL_RCC_DeInit+0x194>)
 80026c4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <HAL_RCC_DeInit+0x198>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fd08 	bl	80010e0 <HAL_InitTick>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80026da:	2300      	movs	r3, #0
  }
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	04003010 	.word	0x04003010
 80026ec:	20003000 	.word	0x20003000
 80026f0:	20000000 	.word	0x20000000
 80026f4:	00f42400 	.word	0x00f42400
 80026f8:	20000004 	.word	0x20000004

080026fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e03f      	b.n	800278e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fe fc14 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2224      	movs	r2, #36	; 0x24
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800273e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f9cb 	bl	8002adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b08a      	sub	sp, #40	; 0x28
 800279a:	af02      	add	r7, sp, #8
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d17c      	bne.n	80028b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_UART_Transmit+0x2c>
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e075      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_UART_Transmit+0x3e>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e06e      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2221      	movs	r2, #33	; 0x21
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ea:	f7fe fcbd 	bl	8001168 <HAL_GetTick>
 80027ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002804:	d108      	bne.n	8002818 <HAL_UART_Transmit+0x82>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d104      	bne.n	8002818 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e003      	b.n	8002820 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002828:	e02a      	b.n	8002880 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f8e2 	bl	80029fe <UART_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e036      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10b      	bne.n	8002862 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002858:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	3302      	adds	r3, #2
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	e007      	b.n	8002872 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	3301      	adds	r3, #1
 8002870:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1cf      	bne.n	800282a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2200      	movs	r2, #0
 8002892:	2140      	movs	r1, #64	; 0x40
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f8b2 	bl	80029fe <UART_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e006      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e000      	b.n	80028b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b08a      	sub	sp, #40	; 0x28
 80028be:	af02      	add	r7, sp, #8
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	4613      	mov	r3, r2
 80028c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	f040 808c 	bne.w	80029f4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <HAL_UART_Receive+0x2e>
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e084      	b.n	80029f6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_UART_Receive+0x40>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e07d      	b.n	80029f6 <HAL_UART_Receive+0x13c>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2222      	movs	r2, #34	; 0x22
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002916:	f7fe fc27 	bl	8001168 <HAL_GetTick>
 800291a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002930:	d108      	bne.n	8002944 <HAL_UART_Receive+0x8a>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d104      	bne.n	8002944 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	e003      	b.n	800294c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002954:	e043      	b.n	80029de <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2200      	movs	r2, #0
 800295e:	2120      	movs	r1, #32
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 f84c 	bl	80029fe <UART_WaitOnFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e042      	b.n	80029f6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10c      	bne.n	8002990 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	b29b      	uxth	r3, r3
 800297e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002982:	b29a      	uxth	r2, r3
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	3302      	adds	r3, #2
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	e01f      	b.n	80029d0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002998:	d007      	beq.n	80029aa <HAL_UART_Receive+0xf0>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10a      	bne.n	80029b8 <HAL_UART_Receive+0xfe>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e008      	b.n	80029ca <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3301      	adds	r3, #1
 80029ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1b6      	bne.n	8002956 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e000      	b.n	80029f6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b090      	sub	sp, #64	; 0x40
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a0e:	e050      	b.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a16:	d04c      	beq.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8002a1e:	f7fe fba3 	bl	8001168 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d241      	bcs.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	330c      	adds	r3, #12
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	e853 3f00 	ldrex	r3, [r3]
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	330c      	adds	r3, #12
 8002a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a4e:	637a      	str	r2, [r7, #52]	; 0x34
 8002a50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a56:	e841 2300 	strex	r3, r2, [r1]
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1e5      	bne.n	8002a2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3314      	adds	r3, #20
 8002a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	e853 3f00 	ldrex	r3, [r3]
 8002a70:	613b      	str	r3, [r7, #16]
   return(result);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f023 0301 	bic.w	r3, r3, #1
 8002a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3314      	adds	r3, #20
 8002a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a82:	623a      	str	r2, [r7, #32]
 8002a84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a86:	69f9      	ldr	r1, [r7, #28]
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	e841 2300 	strex	r3, r2, [r1]
 8002a8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1e5      	bne.n	8002a62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e00f      	b.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d09f      	beq.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3740      	adds	r7, #64	; 0x40
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae0:	b0c0      	sub	sp, #256	; 0x100
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af8:	68d9      	ldr	r1, [r3, #12]
 8002afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	ea40 0301 	orr.w	r3, r0, r1
 8002b04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b34:	f021 010c 	bic.w	r1, r1, #12
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b42:	430b      	orrs	r3, r1
 8002b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b56:	6999      	ldr	r1, [r3, #24]
 8002b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	ea40 0301 	orr.w	r3, r0, r1
 8002b62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b8f      	ldr	r3, [pc, #572]	; (8002da8 <UART_SetConfig+0x2cc>)
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d005      	beq.n	8002b7c <UART_SetConfig+0xa0>
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	4b8d      	ldr	r3, [pc, #564]	; (8002dac <UART_SetConfig+0x2d0>)
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d104      	bne.n	8002b86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b7c:	f7ff fcdc 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8002b80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b84:	e003      	b.n	8002b8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b86:	f7ff fcc3 	bl	8002510 <HAL_RCC_GetPCLK1Freq>
 8002b8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b98:	f040 810c 	bne.w	8002db4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ba6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002baa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002bae:	4622      	mov	r2, r4
 8002bb0:	462b      	mov	r3, r5
 8002bb2:	1891      	adds	r1, r2, r2
 8002bb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bb6:	415b      	adcs	r3, r3
 8002bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	eb12 0801 	adds.w	r8, r2, r1
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	eb43 0901 	adc.w	r9, r3, r1
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bde:	4690      	mov	r8, r2
 8002be0:	4699      	mov	r9, r3
 8002be2:	4623      	mov	r3, r4
 8002be4:	eb18 0303 	adds.w	r3, r8, r3
 8002be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bec:	462b      	mov	r3, r5
 8002bee:	eb49 0303 	adc.w	r3, r9, r3
 8002bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	18db      	adds	r3, r3, r3
 8002c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c10:	4613      	mov	r3, r2
 8002c12:	eb42 0303 	adc.w	r3, r2, r3
 8002c16:	657b      	str	r3, [r7, #84]	; 0x54
 8002c18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c20:	f7fd fb2e 	bl	8000280 <__aeabi_uldivmod>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4b61      	ldr	r3, [pc, #388]	; (8002db0 <UART_SetConfig+0x2d4>)
 8002c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	011c      	lsls	r4, r3, #4
 8002c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c36:	2200      	movs	r2, #0
 8002c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c44:	4642      	mov	r2, r8
 8002c46:	464b      	mov	r3, r9
 8002c48:	1891      	adds	r1, r2, r2
 8002c4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c4c:	415b      	adcs	r3, r3
 8002c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c54:	4641      	mov	r1, r8
 8002c56:	eb12 0a01 	adds.w	sl, r2, r1
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	eb43 0b01 	adc.w	fp, r3, r1
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c74:	4692      	mov	sl, r2
 8002c76:	469b      	mov	fp, r3
 8002c78:	4643      	mov	r3, r8
 8002c7a:	eb1a 0303 	adds.w	r3, sl, r3
 8002c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c82:	464b      	mov	r3, r9
 8002c84:	eb4b 0303 	adc.w	r3, fp, r3
 8002c88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	18db      	adds	r3, r3, r3
 8002ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	eb42 0303 	adc.w	r3, r2, r3
 8002cac:	647b      	str	r3, [r7, #68]	; 0x44
 8002cae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002cb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cb6:	f7fd fae3 	bl	8000280 <__aeabi_uldivmod>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <UART_SetConfig+0x2d4>)
 8002cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	2264      	movs	r2, #100	; 0x64
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	1acb      	subs	r3, r1, r3
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cd6:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <UART_SetConfig+0x2d4>)
 8002cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ce4:	441c      	add	r4, r3
 8002ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cea:	2200      	movs	r2, #0
 8002cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	464b      	mov	r3, r9
 8002cfc:	1891      	adds	r1, r2, r2
 8002cfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d00:	415b      	adcs	r3, r3
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d08:	4641      	mov	r1, r8
 8002d0a:	1851      	adds	r1, r2, r1
 8002d0c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d0e:	4649      	mov	r1, r9
 8002d10:	414b      	adcs	r3, r1
 8002d12:	637b      	str	r3, [r7, #52]	; 0x34
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d20:	4659      	mov	r1, fp
 8002d22:	00cb      	lsls	r3, r1, #3
 8002d24:	4651      	mov	r1, sl
 8002d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d2a:	4651      	mov	r1, sl
 8002d2c:	00ca      	lsls	r2, r1, #3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4619      	mov	r1, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	4642      	mov	r2, r8
 8002d36:	189b      	adds	r3, r3, r2
 8002d38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d3c:	464b      	mov	r3, r9
 8002d3e:	460a      	mov	r2, r1
 8002d40:	eb42 0303 	adc.w	r3, r2, r3
 8002d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	18db      	adds	r3, r3, r3
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d62:	4613      	mov	r3, r2
 8002d64:	eb42 0303 	adc.w	r3, r2, r3
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d72:	f7fd fa85 	bl	8000280 <__aeabi_uldivmod>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <UART_SetConfig+0x2d4>)
 8002d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	2164      	movs	r1, #100	; 0x64
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	3332      	adds	r3, #50	; 0x32
 8002d8e:	4a08      	ldr	r2, [pc, #32]	; (8002db0 <UART_SetConfig+0x2d4>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	f003 0207 	and.w	r2, r3, #7
 8002d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4422      	add	r2, r4
 8002da2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002da4:	e106      	b.n	8002fb4 <UART_SetConfig+0x4d8>
 8002da6:	bf00      	nop
 8002da8:	40011000 	.word	0x40011000
 8002dac:	40011400 	.word	0x40011400
 8002db0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002db8:	2200      	movs	r2, #0
 8002dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002dbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dc6:	4642      	mov	r2, r8
 8002dc8:	464b      	mov	r3, r9
 8002dca:	1891      	adds	r1, r2, r2
 8002dcc:	6239      	str	r1, [r7, #32]
 8002dce:	415b      	adcs	r3, r3
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dd6:	4641      	mov	r1, r8
 8002dd8:	1854      	adds	r4, r2, r1
 8002dda:	4649      	mov	r1, r9
 8002ddc:	eb43 0501 	adc.w	r5, r3, r1
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	00eb      	lsls	r3, r5, #3
 8002dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dee:	00e2      	lsls	r2, r4, #3
 8002df0:	4614      	mov	r4, r2
 8002df2:	461d      	mov	r5, r3
 8002df4:	4643      	mov	r3, r8
 8002df6:	18e3      	adds	r3, r4, r3
 8002df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dfc:	464b      	mov	r3, r9
 8002dfe:	eb45 0303 	adc.w	r3, r5, r3
 8002e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e22:	4629      	mov	r1, r5
 8002e24:	008b      	lsls	r3, r1, #2
 8002e26:	4621      	mov	r1, r4
 8002e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	008a      	lsls	r2, r1, #2
 8002e30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e34:	f7fd fa24 	bl	8000280 <__aeabi_uldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4b60      	ldr	r3, [pc, #384]	; (8002fc0 <UART_SetConfig+0x4e4>)
 8002e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	011c      	lsls	r4, r3, #4
 8002e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e58:	4642      	mov	r2, r8
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	1891      	adds	r1, r2, r2
 8002e5e:	61b9      	str	r1, [r7, #24]
 8002e60:	415b      	adcs	r3, r3
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e68:	4641      	mov	r1, r8
 8002e6a:	1851      	adds	r1, r2, r1
 8002e6c:	6139      	str	r1, [r7, #16]
 8002e6e:	4649      	mov	r1, r9
 8002e70:	414b      	adcs	r3, r1
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e80:	4659      	mov	r1, fp
 8002e82:	00cb      	lsls	r3, r1, #3
 8002e84:	4651      	mov	r1, sl
 8002e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e8a:	4651      	mov	r1, sl
 8002e8c:	00ca      	lsls	r2, r1, #3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	4642      	mov	r2, r8
 8002e96:	189b      	adds	r3, r3, r2
 8002e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e9c:	464b      	mov	r3, r9
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	eb42 0303 	adc.w	r3, r2, r3
 8002ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ec0:	4649      	mov	r1, r9
 8002ec2:	008b      	lsls	r3, r1, #2
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eca:	4641      	mov	r1, r8
 8002ecc:	008a      	lsls	r2, r1, #2
 8002ece:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ed2:	f7fd f9d5 	bl	8000280 <__aeabi_uldivmod>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4611      	mov	r1, r2
 8002edc:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <UART_SetConfig+0x4e4>)
 8002ede:	fba3 2301 	umull	r2, r3, r3, r1
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2264      	movs	r2, #100	; 0x64
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	1acb      	subs	r3, r1, r3
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	3332      	adds	r3, #50	; 0x32
 8002ef0:	4a33      	ldr	r2, [pc, #204]	; (8002fc0 <UART_SetConfig+0x4e4>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002efc:	441c      	add	r4, r3
 8002efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f02:	2200      	movs	r2, #0
 8002f04:	673b      	str	r3, [r7, #112]	; 0x70
 8002f06:	677a      	str	r2, [r7, #116]	; 0x74
 8002f08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f0c:	4642      	mov	r2, r8
 8002f0e:	464b      	mov	r3, r9
 8002f10:	1891      	adds	r1, r2, r2
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	415b      	adcs	r3, r3
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	1851      	adds	r1, r2, r1
 8002f20:	6039      	str	r1, [r7, #0]
 8002f22:	4649      	mov	r1, r9
 8002f24:	414b      	adcs	r3, r1
 8002f26:	607b      	str	r3, [r7, #4]
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f34:	4659      	mov	r1, fp
 8002f36:	00cb      	lsls	r3, r1, #3
 8002f38:	4651      	mov	r1, sl
 8002f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f3e:	4651      	mov	r1, sl
 8002f40:	00ca      	lsls	r2, r1, #3
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	4603      	mov	r3, r0
 8002f48:	4642      	mov	r2, r8
 8002f4a:	189b      	adds	r3, r3, r2
 8002f4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f4e:	464b      	mov	r3, r9
 8002f50:	460a      	mov	r2, r1
 8002f52:	eb42 0303 	adc.w	r3, r2, r3
 8002f56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	663b      	str	r3, [r7, #96]	; 0x60
 8002f62:	667a      	str	r2, [r7, #100]	; 0x64
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f70:	4649      	mov	r1, r9
 8002f72:	008b      	lsls	r3, r1, #2
 8002f74:	4641      	mov	r1, r8
 8002f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f7a:	4641      	mov	r1, r8
 8002f7c:	008a      	lsls	r2, r1, #2
 8002f7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f82:	f7fd f97d 	bl	8000280 <__aeabi_uldivmod>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <UART_SetConfig+0x4e4>)
 8002f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	2164      	movs	r1, #100	; 0x64
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	3332      	adds	r3, #50	; 0x32
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <UART_SetConfig+0x4e4>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	f003 020f 	and.w	r2, r3, #15
 8002faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4422      	add	r2, r4
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fc0:	51eb851f 	.word	0x51eb851f

08002fc4 <_vsiprintf_r>:
 8002fc4:	b500      	push	{lr}
 8002fc6:	b09b      	sub	sp, #108	; 0x6c
 8002fc8:	9100      	str	r1, [sp, #0]
 8002fca:	9104      	str	r1, [sp, #16]
 8002fcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fd0:	9105      	str	r1, [sp, #20]
 8002fd2:	9102      	str	r1, [sp, #8]
 8002fd4:	4905      	ldr	r1, [pc, #20]	; (8002fec <_vsiprintf_r+0x28>)
 8002fd6:	9103      	str	r1, [sp, #12]
 8002fd8:	4669      	mov	r1, sp
 8002fda:	f000 f999 	bl	8003310 <_svfiprintf_r>
 8002fde:	9b00      	ldr	r3, [sp, #0]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	b01b      	add	sp, #108	; 0x6c
 8002fe6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fea:	bf00      	nop
 8002fec:	ffff0208 	.word	0xffff0208

08002ff0 <vsiprintf>:
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	460a      	mov	r2, r1
 8002ff4:	4601      	mov	r1, r0
 8002ff6:	4802      	ldr	r0, [pc, #8]	; (8003000 <vsiprintf+0x10>)
 8002ff8:	6800      	ldr	r0, [r0, #0]
 8002ffa:	f7ff bfe3 	b.w	8002fc4 <_vsiprintf_r>
 8002ffe:	bf00      	nop
 8003000:	20000058 	.word	0x20000058

08003004 <memset>:
 8003004:	4402      	add	r2, r0
 8003006:	4603      	mov	r3, r0
 8003008:	4293      	cmp	r3, r2
 800300a:	d100      	bne.n	800300e <memset+0xa>
 800300c:	4770      	bx	lr
 800300e:	f803 1b01 	strb.w	r1, [r3], #1
 8003012:	e7f9      	b.n	8003008 <memset+0x4>

08003014 <__errno>:
 8003014:	4b01      	ldr	r3, [pc, #4]	; (800301c <__errno+0x8>)
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20000058 	.word	0x20000058

08003020 <__libc_init_array>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	4d0d      	ldr	r5, [pc, #52]	; (8003058 <__libc_init_array+0x38>)
 8003024:	4c0d      	ldr	r4, [pc, #52]	; (800305c <__libc_init_array+0x3c>)
 8003026:	1b64      	subs	r4, r4, r5
 8003028:	10a4      	asrs	r4, r4, #2
 800302a:	2600      	movs	r6, #0
 800302c:	42a6      	cmp	r6, r4
 800302e:	d109      	bne.n	8003044 <__libc_init_array+0x24>
 8003030:	4d0b      	ldr	r5, [pc, #44]	; (8003060 <__libc_init_array+0x40>)
 8003032:	4c0c      	ldr	r4, [pc, #48]	; (8003064 <__libc_init_array+0x44>)
 8003034:	f000 fc6a 	bl	800390c <_init>
 8003038:	1b64      	subs	r4, r4, r5
 800303a:	10a4      	asrs	r4, r4, #2
 800303c:	2600      	movs	r6, #0
 800303e:	42a6      	cmp	r6, r4
 8003040:	d105      	bne.n	800304e <__libc_init_array+0x2e>
 8003042:	bd70      	pop	{r4, r5, r6, pc}
 8003044:	f855 3b04 	ldr.w	r3, [r5], #4
 8003048:	4798      	blx	r3
 800304a:	3601      	adds	r6, #1
 800304c:	e7ee      	b.n	800302c <__libc_init_array+0xc>
 800304e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003052:	4798      	blx	r3
 8003054:	3601      	adds	r6, #1
 8003056:	e7f2      	b.n	800303e <__libc_init_array+0x1e>
 8003058:	080039a8 	.word	0x080039a8
 800305c:	080039a8 	.word	0x080039a8
 8003060:	080039a8 	.word	0x080039a8
 8003064:	080039ac 	.word	0x080039ac

08003068 <__retarget_lock_acquire_recursive>:
 8003068:	4770      	bx	lr

0800306a <__retarget_lock_release_recursive>:
 800306a:	4770      	bx	lr

0800306c <_free_r>:
 800306c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800306e:	2900      	cmp	r1, #0
 8003070:	d044      	beq.n	80030fc <_free_r+0x90>
 8003072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003076:	9001      	str	r0, [sp, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f1a1 0404 	sub.w	r4, r1, #4
 800307e:	bfb8      	it	lt
 8003080:	18e4      	addlt	r4, r4, r3
 8003082:	f000 f8df 	bl	8003244 <__malloc_lock>
 8003086:	4a1e      	ldr	r2, [pc, #120]	; (8003100 <_free_r+0x94>)
 8003088:	9801      	ldr	r0, [sp, #4]
 800308a:	6813      	ldr	r3, [r2, #0]
 800308c:	b933      	cbnz	r3, 800309c <_free_r+0x30>
 800308e:	6063      	str	r3, [r4, #4]
 8003090:	6014      	str	r4, [r2, #0]
 8003092:	b003      	add	sp, #12
 8003094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003098:	f000 b8da 	b.w	8003250 <__malloc_unlock>
 800309c:	42a3      	cmp	r3, r4
 800309e:	d908      	bls.n	80030b2 <_free_r+0x46>
 80030a0:	6825      	ldr	r5, [r4, #0]
 80030a2:	1961      	adds	r1, r4, r5
 80030a4:	428b      	cmp	r3, r1
 80030a6:	bf01      	itttt	eq
 80030a8:	6819      	ldreq	r1, [r3, #0]
 80030aa:	685b      	ldreq	r3, [r3, #4]
 80030ac:	1949      	addeq	r1, r1, r5
 80030ae:	6021      	streq	r1, [r4, #0]
 80030b0:	e7ed      	b.n	800308e <_free_r+0x22>
 80030b2:	461a      	mov	r2, r3
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	b10b      	cbz	r3, 80030bc <_free_r+0x50>
 80030b8:	42a3      	cmp	r3, r4
 80030ba:	d9fa      	bls.n	80030b2 <_free_r+0x46>
 80030bc:	6811      	ldr	r1, [r2, #0]
 80030be:	1855      	adds	r5, r2, r1
 80030c0:	42a5      	cmp	r5, r4
 80030c2:	d10b      	bne.n	80030dc <_free_r+0x70>
 80030c4:	6824      	ldr	r4, [r4, #0]
 80030c6:	4421      	add	r1, r4
 80030c8:	1854      	adds	r4, r2, r1
 80030ca:	42a3      	cmp	r3, r4
 80030cc:	6011      	str	r1, [r2, #0]
 80030ce:	d1e0      	bne.n	8003092 <_free_r+0x26>
 80030d0:	681c      	ldr	r4, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	6053      	str	r3, [r2, #4]
 80030d6:	440c      	add	r4, r1
 80030d8:	6014      	str	r4, [r2, #0]
 80030da:	e7da      	b.n	8003092 <_free_r+0x26>
 80030dc:	d902      	bls.n	80030e4 <_free_r+0x78>
 80030de:	230c      	movs	r3, #12
 80030e0:	6003      	str	r3, [r0, #0]
 80030e2:	e7d6      	b.n	8003092 <_free_r+0x26>
 80030e4:	6825      	ldr	r5, [r4, #0]
 80030e6:	1961      	adds	r1, r4, r5
 80030e8:	428b      	cmp	r3, r1
 80030ea:	bf04      	itt	eq
 80030ec:	6819      	ldreq	r1, [r3, #0]
 80030ee:	685b      	ldreq	r3, [r3, #4]
 80030f0:	6063      	str	r3, [r4, #4]
 80030f2:	bf04      	itt	eq
 80030f4:	1949      	addeq	r1, r1, r5
 80030f6:	6021      	streq	r1, [r4, #0]
 80030f8:	6054      	str	r4, [r2, #4]
 80030fa:	e7ca      	b.n	8003092 <_free_r+0x26>
 80030fc:	b003      	add	sp, #12
 80030fe:	bd30      	pop	{r4, r5, pc}
 8003100:	20000338 	.word	0x20000338

08003104 <sbrk_aligned>:
 8003104:	b570      	push	{r4, r5, r6, lr}
 8003106:	4e0e      	ldr	r6, [pc, #56]	; (8003140 <sbrk_aligned+0x3c>)
 8003108:	460c      	mov	r4, r1
 800310a:	6831      	ldr	r1, [r6, #0]
 800310c:	4605      	mov	r5, r0
 800310e:	b911      	cbnz	r1, 8003116 <sbrk_aligned+0x12>
 8003110:	f000 fba6 	bl	8003860 <_sbrk_r>
 8003114:	6030      	str	r0, [r6, #0]
 8003116:	4621      	mov	r1, r4
 8003118:	4628      	mov	r0, r5
 800311a:	f000 fba1 	bl	8003860 <_sbrk_r>
 800311e:	1c43      	adds	r3, r0, #1
 8003120:	d00a      	beq.n	8003138 <sbrk_aligned+0x34>
 8003122:	1cc4      	adds	r4, r0, #3
 8003124:	f024 0403 	bic.w	r4, r4, #3
 8003128:	42a0      	cmp	r0, r4
 800312a:	d007      	beq.n	800313c <sbrk_aligned+0x38>
 800312c:	1a21      	subs	r1, r4, r0
 800312e:	4628      	mov	r0, r5
 8003130:	f000 fb96 	bl	8003860 <_sbrk_r>
 8003134:	3001      	adds	r0, #1
 8003136:	d101      	bne.n	800313c <sbrk_aligned+0x38>
 8003138:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800313c:	4620      	mov	r0, r4
 800313e:	bd70      	pop	{r4, r5, r6, pc}
 8003140:	2000033c 	.word	0x2000033c

08003144 <_malloc_r>:
 8003144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003148:	1ccd      	adds	r5, r1, #3
 800314a:	f025 0503 	bic.w	r5, r5, #3
 800314e:	3508      	adds	r5, #8
 8003150:	2d0c      	cmp	r5, #12
 8003152:	bf38      	it	cc
 8003154:	250c      	movcc	r5, #12
 8003156:	2d00      	cmp	r5, #0
 8003158:	4607      	mov	r7, r0
 800315a:	db01      	blt.n	8003160 <_malloc_r+0x1c>
 800315c:	42a9      	cmp	r1, r5
 800315e:	d905      	bls.n	800316c <_malloc_r+0x28>
 8003160:	230c      	movs	r3, #12
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	2600      	movs	r6, #0
 8003166:	4630      	mov	r0, r6
 8003168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800316c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003240 <_malloc_r+0xfc>
 8003170:	f000 f868 	bl	8003244 <__malloc_lock>
 8003174:	f8d8 3000 	ldr.w	r3, [r8]
 8003178:	461c      	mov	r4, r3
 800317a:	bb5c      	cbnz	r4, 80031d4 <_malloc_r+0x90>
 800317c:	4629      	mov	r1, r5
 800317e:	4638      	mov	r0, r7
 8003180:	f7ff ffc0 	bl	8003104 <sbrk_aligned>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	4604      	mov	r4, r0
 8003188:	d155      	bne.n	8003236 <_malloc_r+0xf2>
 800318a:	f8d8 4000 	ldr.w	r4, [r8]
 800318e:	4626      	mov	r6, r4
 8003190:	2e00      	cmp	r6, #0
 8003192:	d145      	bne.n	8003220 <_malloc_r+0xdc>
 8003194:	2c00      	cmp	r4, #0
 8003196:	d048      	beq.n	800322a <_malloc_r+0xe6>
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	4631      	mov	r1, r6
 800319c:	4638      	mov	r0, r7
 800319e:	eb04 0903 	add.w	r9, r4, r3
 80031a2:	f000 fb5d 	bl	8003860 <_sbrk_r>
 80031a6:	4581      	cmp	r9, r0
 80031a8:	d13f      	bne.n	800322a <_malloc_r+0xe6>
 80031aa:	6821      	ldr	r1, [r4, #0]
 80031ac:	1a6d      	subs	r5, r5, r1
 80031ae:	4629      	mov	r1, r5
 80031b0:	4638      	mov	r0, r7
 80031b2:	f7ff ffa7 	bl	8003104 <sbrk_aligned>
 80031b6:	3001      	adds	r0, #1
 80031b8:	d037      	beq.n	800322a <_malloc_r+0xe6>
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	442b      	add	r3, r5
 80031be:	6023      	str	r3, [r4, #0]
 80031c0:	f8d8 3000 	ldr.w	r3, [r8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d038      	beq.n	800323a <_malloc_r+0xf6>
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	42a2      	cmp	r2, r4
 80031cc:	d12b      	bne.n	8003226 <_malloc_r+0xe2>
 80031ce:	2200      	movs	r2, #0
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	e00f      	b.n	80031f4 <_malloc_r+0xb0>
 80031d4:	6822      	ldr	r2, [r4, #0]
 80031d6:	1b52      	subs	r2, r2, r5
 80031d8:	d41f      	bmi.n	800321a <_malloc_r+0xd6>
 80031da:	2a0b      	cmp	r2, #11
 80031dc:	d917      	bls.n	800320e <_malloc_r+0xca>
 80031de:	1961      	adds	r1, r4, r5
 80031e0:	42a3      	cmp	r3, r4
 80031e2:	6025      	str	r5, [r4, #0]
 80031e4:	bf18      	it	ne
 80031e6:	6059      	strne	r1, [r3, #4]
 80031e8:	6863      	ldr	r3, [r4, #4]
 80031ea:	bf08      	it	eq
 80031ec:	f8c8 1000 	streq.w	r1, [r8]
 80031f0:	5162      	str	r2, [r4, r5]
 80031f2:	604b      	str	r3, [r1, #4]
 80031f4:	4638      	mov	r0, r7
 80031f6:	f104 060b 	add.w	r6, r4, #11
 80031fa:	f000 f829 	bl	8003250 <__malloc_unlock>
 80031fe:	f026 0607 	bic.w	r6, r6, #7
 8003202:	1d23      	adds	r3, r4, #4
 8003204:	1af2      	subs	r2, r6, r3
 8003206:	d0ae      	beq.n	8003166 <_malloc_r+0x22>
 8003208:	1b9b      	subs	r3, r3, r6
 800320a:	50a3      	str	r3, [r4, r2]
 800320c:	e7ab      	b.n	8003166 <_malloc_r+0x22>
 800320e:	42a3      	cmp	r3, r4
 8003210:	6862      	ldr	r2, [r4, #4]
 8003212:	d1dd      	bne.n	80031d0 <_malloc_r+0x8c>
 8003214:	f8c8 2000 	str.w	r2, [r8]
 8003218:	e7ec      	b.n	80031f4 <_malloc_r+0xb0>
 800321a:	4623      	mov	r3, r4
 800321c:	6864      	ldr	r4, [r4, #4]
 800321e:	e7ac      	b.n	800317a <_malloc_r+0x36>
 8003220:	4634      	mov	r4, r6
 8003222:	6876      	ldr	r6, [r6, #4]
 8003224:	e7b4      	b.n	8003190 <_malloc_r+0x4c>
 8003226:	4613      	mov	r3, r2
 8003228:	e7cc      	b.n	80031c4 <_malloc_r+0x80>
 800322a:	230c      	movs	r3, #12
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	4638      	mov	r0, r7
 8003230:	f000 f80e 	bl	8003250 <__malloc_unlock>
 8003234:	e797      	b.n	8003166 <_malloc_r+0x22>
 8003236:	6025      	str	r5, [r4, #0]
 8003238:	e7dc      	b.n	80031f4 <_malloc_r+0xb0>
 800323a:	605b      	str	r3, [r3, #4]
 800323c:	deff      	udf	#255	; 0xff
 800323e:	bf00      	nop
 8003240:	20000338 	.word	0x20000338

08003244 <__malloc_lock>:
 8003244:	4801      	ldr	r0, [pc, #4]	; (800324c <__malloc_lock+0x8>)
 8003246:	f7ff bf0f 	b.w	8003068 <__retarget_lock_acquire_recursive>
 800324a:	bf00      	nop
 800324c:	20000334 	.word	0x20000334

08003250 <__malloc_unlock>:
 8003250:	4801      	ldr	r0, [pc, #4]	; (8003258 <__malloc_unlock+0x8>)
 8003252:	f7ff bf0a 	b.w	800306a <__retarget_lock_release_recursive>
 8003256:	bf00      	nop
 8003258:	20000334 	.word	0x20000334

0800325c <__ssputs_r>:
 800325c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003260:	688e      	ldr	r6, [r1, #8]
 8003262:	461f      	mov	r7, r3
 8003264:	42be      	cmp	r6, r7
 8003266:	680b      	ldr	r3, [r1, #0]
 8003268:	4682      	mov	sl, r0
 800326a:	460c      	mov	r4, r1
 800326c:	4690      	mov	r8, r2
 800326e:	d82c      	bhi.n	80032ca <__ssputs_r+0x6e>
 8003270:	898a      	ldrh	r2, [r1, #12]
 8003272:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003276:	d026      	beq.n	80032c6 <__ssputs_r+0x6a>
 8003278:	6965      	ldr	r5, [r4, #20]
 800327a:	6909      	ldr	r1, [r1, #16]
 800327c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003280:	eba3 0901 	sub.w	r9, r3, r1
 8003284:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003288:	1c7b      	adds	r3, r7, #1
 800328a:	444b      	add	r3, r9
 800328c:	106d      	asrs	r5, r5, #1
 800328e:	429d      	cmp	r5, r3
 8003290:	bf38      	it	cc
 8003292:	461d      	movcc	r5, r3
 8003294:	0553      	lsls	r3, r2, #21
 8003296:	d527      	bpl.n	80032e8 <__ssputs_r+0x8c>
 8003298:	4629      	mov	r1, r5
 800329a:	f7ff ff53 	bl	8003144 <_malloc_r>
 800329e:	4606      	mov	r6, r0
 80032a0:	b360      	cbz	r0, 80032fc <__ssputs_r+0xa0>
 80032a2:	6921      	ldr	r1, [r4, #16]
 80032a4:	464a      	mov	r2, r9
 80032a6:	f000 faeb 	bl	8003880 <memcpy>
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b4:	81a3      	strh	r3, [r4, #12]
 80032b6:	6126      	str	r6, [r4, #16]
 80032b8:	6165      	str	r5, [r4, #20]
 80032ba:	444e      	add	r6, r9
 80032bc:	eba5 0509 	sub.w	r5, r5, r9
 80032c0:	6026      	str	r6, [r4, #0]
 80032c2:	60a5      	str	r5, [r4, #8]
 80032c4:	463e      	mov	r6, r7
 80032c6:	42be      	cmp	r6, r7
 80032c8:	d900      	bls.n	80032cc <__ssputs_r+0x70>
 80032ca:	463e      	mov	r6, r7
 80032cc:	6820      	ldr	r0, [r4, #0]
 80032ce:	4632      	mov	r2, r6
 80032d0:	4641      	mov	r1, r8
 80032d2:	f000 faab 	bl	800382c <memmove>
 80032d6:	68a3      	ldr	r3, [r4, #8]
 80032d8:	1b9b      	subs	r3, r3, r6
 80032da:	60a3      	str	r3, [r4, #8]
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	4433      	add	r3, r6
 80032e0:	6023      	str	r3, [r4, #0]
 80032e2:	2000      	movs	r0, #0
 80032e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e8:	462a      	mov	r2, r5
 80032ea:	f000 fad7 	bl	800389c <_realloc_r>
 80032ee:	4606      	mov	r6, r0
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d1e0      	bne.n	80032b6 <__ssputs_r+0x5a>
 80032f4:	6921      	ldr	r1, [r4, #16]
 80032f6:	4650      	mov	r0, sl
 80032f8:	f7ff feb8 	bl	800306c <_free_r>
 80032fc:	230c      	movs	r3, #12
 80032fe:	f8ca 3000 	str.w	r3, [sl]
 8003302:	89a3      	ldrh	r3, [r4, #12]
 8003304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003308:	81a3      	strh	r3, [r4, #12]
 800330a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800330e:	e7e9      	b.n	80032e4 <__ssputs_r+0x88>

08003310 <_svfiprintf_r>:
 8003310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003314:	4698      	mov	r8, r3
 8003316:	898b      	ldrh	r3, [r1, #12]
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	b09d      	sub	sp, #116	; 0x74
 800331c:	4607      	mov	r7, r0
 800331e:	460d      	mov	r5, r1
 8003320:	4614      	mov	r4, r2
 8003322:	d50e      	bpl.n	8003342 <_svfiprintf_r+0x32>
 8003324:	690b      	ldr	r3, [r1, #16]
 8003326:	b963      	cbnz	r3, 8003342 <_svfiprintf_r+0x32>
 8003328:	2140      	movs	r1, #64	; 0x40
 800332a:	f7ff ff0b 	bl	8003144 <_malloc_r>
 800332e:	6028      	str	r0, [r5, #0]
 8003330:	6128      	str	r0, [r5, #16]
 8003332:	b920      	cbnz	r0, 800333e <_svfiprintf_r+0x2e>
 8003334:	230c      	movs	r3, #12
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800333c:	e0d0      	b.n	80034e0 <_svfiprintf_r+0x1d0>
 800333e:	2340      	movs	r3, #64	; 0x40
 8003340:	616b      	str	r3, [r5, #20]
 8003342:	2300      	movs	r3, #0
 8003344:	9309      	str	r3, [sp, #36]	; 0x24
 8003346:	2320      	movs	r3, #32
 8003348:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800334c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003350:	2330      	movs	r3, #48	; 0x30
 8003352:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80034f8 <_svfiprintf_r+0x1e8>
 8003356:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800335a:	f04f 0901 	mov.w	r9, #1
 800335e:	4623      	mov	r3, r4
 8003360:	469a      	mov	sl, r3
 8003362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003366:	b10a      	cbz	r2, 800336c <_svfiprintf_r+0x5c>
 8003368:	2a25      	cmp	r2, #37	; 0x25
 800336a:	d1f9      	bne.n	8003360 <_svfiprintf_r+0x50>
 800336c:	ebba 0b04 	subs.w	fp, sl, r4
 8003370:	d00b      	beq.n	800338a <_svfiprintf_r+0x7a>
 8003372:	465b      	mov	r3, fp
 8003374:	4622      	mov	r2, r4
 8003376:	4629      	mov	r1, r5
 8003378:	4638      	mov	r0, r7
 800337a:	f7ff ff6f 	bl	800325c <__ssputs_r>
 800337e:	3001      	adds	r0, #1
 8003380:	f000 80a9 	beq.w	80034d6 <_svfiprintf_r+0x1c6>
 8003384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003386:	445a      	add	r2, fp
 8003388:	9209      	str	r2, [sp, #36]	; 0x24
 800338a:	f89a 3000 	ldrb.w	r3, [sl]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80a1 	beq.w	80034d6 <_svfiprintf_r+0x1c6>
 8003394:	2300      	movs	r3, #0
 8003396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800339a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800339e:	f10a 0a01 	add.w	sl, sl, #1
 80033a2:	9304      	str	r3, [sp, #16]
 80033a4:	9307      	str	r3, [sp, #28]
 80033a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033aa:	931a      	str	r3, [sp, #104]	; 0x68
 80033ac:	4654      	mov	r4, sl
 80033ae:	2205      	movs	r2, #5
 80033b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033b4:	4850      	ldr	r0, [pc, #320]	; (80034f8 <_svfiprintf_r+0x1e8>)
 80033b6:	f7fc ff13 	bl	80001e0 <memchr>
 80033ba:	9a04      	ldr	r2, [sp, #16]
 80033bc:	b9d8      	cbnz	r0, 80033f6 <_svfiprintf_r+0xe6>
 80033be:	06d0      	lsls	r0, r2, #27
 80033c0:	bf44      	itt	mi
 80033c2:	2320      	movmi	r3, #32
 80033c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033c8:	0711      	lsls	r1, r2, #28
 80033ca:	bf44      	itt	mi
 80033cc:	232b      	movmi	r3, #43	; 0x2b
 80033ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033d2:	f89a 3000 	ldrb.w	r3, [sl]
 80033d6:	2b2a      	cmp	r3, #42	; 0x2a
 80033d8:	d015      	beq.n	8003406 <_svfiprintf_r+0xf6>
 80033da:	9a07      	ldr	r2, [sp, #28]
 80033dc:	4654      	mov	r4, sl
 80033de:	2000      	movs	r0, #0
 80033e0:	f04f 0c0a 	mov.w	ip, #10
 80033e4:	4621      	mov	r1, r4
 80033e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033ea:	3b30      	subs	r3, #48	; 0x30
 80033ec:	2b09      	cmp	r3, #9
 80033ee:	d94d      	bls.n	800348c <_svfiprintf_r+0x17c>
 80033f0:	b1b0      	cbz	r0, 8003420 <_svfiprintf_r+0x110>
 80033f2:	9207      	str	r2, [sp, #28]
 80033f4:	e014      	b.n	8003420 <_svfiprintf_r+0x110>
 80033f6:	eba0 0308 	sub.w	r3, r0, r8
 80033fa:	fa09 f303 	lsl.w	r3, r9, r3
 80033fe:	4313      	orrs	r3, r2
 8003400:	9304      	str	r3, [sp, #16]
 8003402:	46a2      	mov	sl, r4
 8003404:	e7d2      	b.n	80033ac <_svfiprintf_r+0x9c>
 8003406:	9b03      	ldr	r3, [sp, #12]
 8003408:	1d19      	adds	r1, r3, #4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	9103      	str	r1, [sp, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	bfbb      	ittet	lt
 8003412:	425b      	neglt	r3, r3
 8003414:	f042 0202 	orrlt.w	r2, r2, #2
 8003418:	9307      	strge	r3, [sp, #28]
 800341a:	9307      	strlt	r3, [sp, #28]
 800341c:	bfb8      	it	lt
 800341e:	9204      	strlt	r2, [sp, #16]
 8003420:	7823      	ldrb	r3, [r4, #0]
 8003422:	2b2e      	cmp	r3, #46	; 0x2e
 8003424:	d10c      	bne.n	8003440 <_svfiprintf_r+0x130>
 8003426:	7863      	ldrb	r3, [r4, #1]
 8003428:	2b2a      	cmp	r3, #42	; 0x2a
 800342a:	d134      	bne.n	8003496 <_svfiprintf_r+0x186>
 800342c:	9b03      	ldr	r3, [sp, #12]
 800342e:	1d1a      	adds	r2, r3, #4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	9203      	str	r2, [sp, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	bfb8      	it	lt
 8003438:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800343c:	3402      	adds	r4, #2
 800343e:	9305      	str	r3, [sp, #20]
 8003440:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003508 <_svfiprintf_r+0x1f8>
 8003444:	7821      	ldrb	r1, [r4, #0]
 8003446:	2203      	movs	r2, #3
 8003448:	4650      	mov	r0, sl
 800344a:	f7fc fec9 	bl	80001e0 <memchr>
 800344e:	b138      	cbz	r0, 8003460 <_svfiprintf_r+0x150>
 8003450:	9b04      	ldr	r3, [sp, #16]
 8003452:	eba0 000a 	sub.w	r0, r0, sl
 8003456:	2240      	movs	r2, #64	; 0x40
 8003458:	4082      	lsls	r2, r0
 800345a:	4313      	orrs	r3, r2
 800345c:	3401      	adds	r4, #1
 800345e:	9304      	str	r3, [sp, #16]
 8003460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003464:	4825      	ldr	r0, [pc, #148]	; (80034fc <_svfiprintf_r+0x1ec>)
 8003466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800346a:	2206      	movs	r2, #6
 800346c:	f7fc feb8 	bl	80001e0 <memchr>
 8003470:	2800      	cmp	r0, #0
 8003472:	d038      	beq.n	80034e6 <_svfiprintf_r+0x1d6>
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <_svfiprintf_r+0x1f0>)
 8003476:	bb1b      	cbnz	r3, 80034c0 <_svfiprintf_r+0x1b0>
 8003478:	9b03      	ldr	r3, [sp, #12]
 800347a:	3307      	adds	r3, #7
 800347c:	f023 0307 	bic.w	r3, r3, #7
 8003480:	3308      	adds	r3, #8
 8003482:	9303      	str	r3, [sp, #12]
 8003484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003486:	4433      	add	r3, r6
 8003488:	9309      	str	r3, [sp, #36]	; 0x24
 800348a:	e768      	b.n	800335e <_svfiprintf_r+0x4e>
 800348c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003490:	460c      	mov	r4, r1
 8003492:	2001      	movs	r0, #1
 8003494:	e7a6      	b.n	80033e4 <_svfiprintf_r+0xd4>
 8003496:	2300      	movs	r3, #0
 8003498:	3401      	adds	r4, #1
 800349a:	9305      	str	r3, [sp, #20]
 800349c:	4619      	mov	r1, r3
 800349e:	f04f 0c0a 	mov.w	ip, #10
 80034a2:	4620      	mov	r0, r4
 80034a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034a8:	3a30      	subs	r2, #48	; 0x30
 80034aa:	2a09      	cmp	r2, #9
 80034ac:	d903      	bls.n	80034b6 <_svfiprintf_r+0x1a6>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0c6      	beq.n	8003440 <_svfiprintf_r+0x130>
 80034b2:	9105      	str	r1, [sp, #20]
 80034b4:	e7c4      	b.n	8003440 <_svfiprintf_r+0x130>
 80034b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80034ba:	4604      	mov	r4, r0
 80034bc:	2301      	movs	r3, #1
 80034be:	e7f0      	b.n	80034a2 <_svfiprintf_r+0x192>
 80034c0:	ab03      	add	r3, sp, #12
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	462a      	mov	r2, r5
 80034c6:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <_svfiprintf_r+0x1f4>)
 80034c8:	a904      	add	r1, sp, #16
 80034ca:	4638      	mov	r0, r7
 80034cc:	f3af 8000 	nop.w
 80034d0:	1c42      	adds	r2, r0, #1
 80034d2:	4606      	mov	r6, r0
 80034d4:	d1d6      	bne.n	8003484 <_svfiprintf_r+0x174>
 80034d6:	89ab      	ldrh	r3, [r5, #12]
 80034d8:	065b      	lsls	r3, r3, #25
 80034da:	f53f af2d 	bmi.w	8003338 <_svfiprintf_r+0x28>
 80034de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034e0:	b01d      	add	sp, #116	; 0x74
 80034e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034e6:	ab03      	add	r3, sp, #12
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	462a      	mov	r2, r5
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <_svfiprintf_r+0x1f4>)
 80034ee:	a904      	add	r1, sp, #16
 80034f0:	4638      	mov	r0, r7
 80034f2:	f000 f879 	bl	80035e8 <_printf_i>
 80034f6:	e7eb      	b.n	80034d0 <_svfiprintf_r+0x1c0>
 80034f8:	0800396c 	.word	0x0800396c
 80034fc:	08003976 	.word	0x08003976
 8003500:	00000000 	.word	0x00000000
 8003504:	0800325d 	.word	0x0800325d
 8003508:	08003972 	.word	0x08003972

0800350c <_printf_common>:
 800350c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003510:	4616      	mov	r6, r2
 8003512:	4699      	mov	r9, r3
 8003514:	688a      	ldr	r2, [r1, #8]
 8003516:	690b      	ldr	r3, [r1, #16]
 8003518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800351c:	4293      	cmp	r3, r2
 800351e:	bfb8      	it	lt
 8003520:	4613      	movlt	r3, r2
 8003522:	6033      	str	r3, [r6, #0]
 8003524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003528:	4607      	mov	r7, r0
 800352a:	460c      	mov	r4, r1
 800352c:	b10a      	cbz	r2, 8003532 <_printf_common+0x26>
 800352e:	3301      	adds	r3, #1
 8003530:	6033      	str	r3, [r6, #0]
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	0699      	lsls	r1, r3, #26
 8003536:	bf42      	ittt	mi
 8003538:	6833      	ldrmi	r3, [r6, #0]
 800353a:	3302      	addmi	r3, #2
 800353c:	6033      	strmi	r3, [r6, #0]
 800353e:	6825      	ldr	r5, [r4, #0]
 8003540:	f015 0506 	ands.w	r5, r5, #6
 8003544:	d106      	bne.n	8003554 <_printf_common+0x48>
 8003546:	f104 0a19 	add.w	sl, r4, #25
 800354a:	68e3      	ldr	r3, [r4, #12]
 800354c:	6832      	ldr	r2, [r6, #0]
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	42ab      	cmp	r3, r5
 8003552:	dc26      	bgt.n	80035a2 <_printf_common+0x96>
 8003554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003558:	1e13      	subs	r3, r2, #0
 800355a:	6822      	ldr	r2, [r4, #0]
 800355c:	bf18      	it	ne
 800355e:	2301      	movne	r3, #1
 8003560:	0692      	lsls	r2, r2, #26
 8003562:	d42b      	bmi.n	80035bc <_printf_common+0xb0>
 8003564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003568:	4649      	mov	r1, r9
 800356a:	4638      	mov	r0, r7
 800356c:	47c0      	blx	r8
 800356e:	3001      	adds	r0, #1
 8003570:	d01e      	beq.n	80035b0 <_printf_common+0xa4>
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	6922      	ldr	r2, [r4, #16]
 8003576:	f003 0306 	and.w	r3, r3, #6
 800357a:	2b04      	cmp	r3, #4
 800357c:	bf02      	ittt	eq
 800357e:	68e5      	ldreq	r5, [r4, #12]
 8003580:	6833      	ldreq	r3, [r6, #0]
 8003582:	1aed      	subeq	r5, r5, r3
 8003584:	68a3      	ldr	r3, [r4, #8]
 8003586:	bf0c      	ite	eq
 8003588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800358c:	2500      	movne	r5, #0
 800358e:	4293      	cmp	r3, r2
 8003590:	bfc4      	itt	gt
 8003592:	1a9b      	subgt	r3, r3, r2
 8003594:	18ed      	addgt	r5, r5, r3
 8003596:	2600      	movs	r6, #0
 8003598:	341a      	adds	r4, #26
 800359a:	42b5      	cmp	r5, r6
 800359c:	d11a      	bne.n	80035d4 <_printf_common+0xc8>
 800359e:	2000      	movs	r0, #0
 80035a0:	e008      	b.n	80035b4 <_printf_common+0xa8>
 80035a2:	2301      	movs	r3, #1
 80035a4:	4652      	mov	r2, sl
 80035a6:	4649      	mov	r1, r9
 80035a8:	4638      	mov	r0, r7
 80035aa:	47c0      	blx	r8
 80035ac:	3001      	adds	r0, #1
 80035ae:	d103      	bne.n	80035b8 <_printf_common+0xac>
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b8:	3501      	adds	r5, #1
 80035ba:	e7c6      	b.n	800354a <_printf_common+0x3e>
 80035bc:	18e1      	adds	r1, r4, r3
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	2030      	movs	r0, #48	; 0x30
 80035c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035c6:	4422      	add	r2, r4
 80035c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035d0:	3302      	adds	r3, #2
 80035d2:	e7c7      	b.n	8003564 <_printf_common+0x58>
 80035d4:	2301      	movs	r3, #1
 80035d6:	4622      	mov	r2, r4
 80035d8:	4649      	mov	r1, r9
 80035da:	4638      	mov	r0, r7
 80035dc:	47c0      	blx	r8
 80035de:	3001      	adds	r0, #1
 80035e0:	d0e6      	beq.n	80035b0 <_printf_common+0xa4>
 80035e2:	3601      	adds	r6, #1
 80035e4:	e7d9      	b.n	800359a <_printf_common+0x8e>
	...

080035e8 <_printf_i>:
 80035e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035ec:	7e0f      	ldrb	r7, [r1, #24]
 80035ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035f0:	2f78      	cmp	r7, #120	; 0x78
 80035f2:	4691      	mov	r9, r2
 80035f4:	4680      	mov	r8, r0
 80035f6:	460c      	mov	r4, r1
 80035f8:	469a      	mov	sl, r3
 80035fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035fe:	d807      	bhi.n	8003610 <_printf_i+0x28>
 8003600:	2f62      	cmp	r7, #98	; 0x62
 8003602:	d80a      	bhi.n	800361a <_printf_i+0x32>
 8003604:	2f00      	cmp	r7, #0
 8003606:	f000 80d4 	beq.w	80037b2 <_printf_i+0x1ca>
 800360a:	2f58      	cmp	r7, #88	; 0x58
 800360c:	f000 80c0 	beq.w	8003790 <_printf_i+0x1a8>
 8003610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003618:	e03a      	b.n	8003690 <_printf_i+0xa8>
 800361a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800361e:	2b15      	cmp	r3, #21
 8003620:	d8f6      	bhi.n	8003610 <_printf_i+0x28>
 8003622:	a101      	add	r1, pc, #4	; (adr r1, 8003628 <_printf_i+0x40>)
 8003624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003628:	08003681 	.word	0x08003681
 800362c:	08003695 	.word	0x08003695
 8003630:	08003611 	.word	0x08003611
 8003634:	08003611 	.word	0x08003611
 8003638:	08003611 	.word	0x08003611
 800363c:	08003611 	.word	0x08003611
 8003640:	08003695 	.word	0x08003695
 8003644:	08003611 	.word	0x08003611
 8003648:	08003611 	.word	0x08003611
 800364c:	08003611 	.word	0x08003611
 8003650:	08003611 	.word	0x08003611
 8003654:	08003799 	.word	0x08003799
 8003658:	080036c1 	.word	0x080036c1
 800365c:	08003753 	.word	0x08003753
 8003660:	08003611 	.word	0x08003611
 8003664:	08003611 	.word	0x08003611
 8003668:	080037bb 	.word	0x080037bb
 800366c:	08003611 	.word	0x08003611
 8003670:	080036c1 	.word	0x080036c1
 8003674:	08003611 	.word	0x08003611
 8003678:	08003611 	.word	0x08003611
 800367c:	0800375b 	.word	0x0800375b
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	1d1a      	adds	r2, r3, #4
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	602a      	str	r2, [r5, #0]
 8003688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800368c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003690:	2301      	movs	r3, #1
 8003692:	e09f      	b.n	80037d4 <_printf_i+0x1ec>
 8003694:	6820      	ldr	r0, [r4, #0]
 8003696:	682b      	ldr	r3, [r5, #0]
 8003698:	0607      	lsls	r7, r0, #24
 800369a:	f103 0104 	add.w	r1, r3, #4
 800369e:	6029      	str	r1, [r5, #0]
 80036a0:	d501      	bpl.n	80036a6 <_printf_i+0xbe>
 80036a2:	681e      	ldr	r6, [r3, #0]
 80036a4:	e003      	b.n	80036ae <_printf_i+0xc6>
 80036a6:	0646      	lsls	r6, r0, #25
 80036a8:	d5fb      	bpl.n	80036a2 <_printf_i+0xba>
 80036aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80036ae:	2e00      	cmp	r6, #0
 80036b0:	da03      	bge.n	80036ba <_printf_i+0xd2>
 80036b2:	232d      	movs	r3, #45	; 0x2d
 80036b4:	4276      	negs	r6, r6
 80036b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036ba:	485a      	ldr	r0, [pc, #360]	; (8003824 <_printf_i+0x23c>)
 80036bc:	230a      	movs	r3, #10
 80036be:	e012      	b.n	80036e6 <_printf_i+0xfe>
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	6820      	ldr	r0, [r4, #0]
 80036c4:	1d19      	adds	r1, r3, #4
 80036c6:	6029      	str	r1, [r5, #0]
 80036c8:	0605      	lsls	r5, r0, #24
 80036ca:	d501      	bpl.n	80036d0 <_printf_i+0xe8>
 80036cc:	681e      	ldr	r6, [r3, #0]
 80036ce:	e002      	b.n	80036d6 <_printf_i+0xee>
 80036d0:	0641      	lsls	r1, r0, #25
 80036d2:	d5fb      	bpl.n	80036cc <_printf_i+0xe4>
 80036d4:	881e      	ldrh	r6, [r3, #0]
 80036d6:	4853      	ldr	r0, [pc, #332]	; (8003824 <_printf_i+0x23c>)
 80036d8:	2f6f      	cmp	r7, #111	; 0x6f
 80036da:	bf0c      	ite	eq
 80036dc:	2308      	moveq	r3, #8
 80036de:	230a      	movne	r3, #10
 80036e0:	2100      	movs	r1, #0
 80036e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036e6:	6865      	ldr	r5, [r4, #4]
 80036e8:	60a5      	str	r5, [r4, #8]
 80036ea:	2d00      	cmp	r5, #0
 80036ec:	bfa2      	ittt	ge
 80036ee:	6821      	ldrge	r1, [r4, #0]
 80036f0:	f021 0104 	bicge.w	r1, r1, #4
 80036f4:	6021      	strge	r1, [r4, #0]
 80036f6:	b90e      	cbnz	r6, 80036fc <_printf_i+0x114>
 80036f8:	2d00      	cmp	r5, #0
 80036fa:	d04b      	beq.n	8003794 <_printf_i+0x1ac>
 80036fc:	4615      	mov	r5, r2
 80036fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8003702:	fb03 6711 	mls	r7, r3, r1, r6
 8003706:	5dc7      	ldrb	r7, [r0, r7]
 8003708:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800370c:	4637      	mov	r7, r6
 800370e:	42bb      	cmp	r3, r7
 8003710:	460e      	mov	r6, r1
 8003712:	d9f4      	bls.n	80036fe <_printf_i+0x116>
 8003714:	2b08      	cmp	r3, #8
 8003716:	d10b      	bne.n	8003730 <_printf_i+0x148>
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	07de      	lsls	r6, r3, #31
 800371c:	d508      	bpl.n	8003730 <_printf_i+0x148>
 800371e:	6923      	ldr	r3, [r4, #16]
 8003720:	6861      	ldr	r1, [r4, #4]
 8003722:	4299      	cmp	r1, r3
 8003724:	bfde      	ittt	le
 8003726:	2330      	movle	r3, #48	; 0x30
 8003728:	f805 3c01 	strble.w	r3, [r5, #-1]
 800372c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003730:	1b52      	subs	r2, r2, r5
 8003732:	6122      	str	r2, [r4, #16]
 8003734:	f8cd a000 	str.w	sl, [sp]
 8003738:	464b      	mov	r3, r9
 800373a:	aa03      	add	r2, sp, #12
 800373c:	4621      	mov	r1, r4
 800373e:	4640      	mov	r0, r8
 8003740:	f7ff fee4 	bl	800350c <_printf_common>
 8003744:	3001      	adds	r0, #1
 8003746:	d14a      	bne.n	80037de <_printf_i+0x1f6>
 8003748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800374c:	b004      	add	sp, #16
 800374e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	f043 0320 	orr.w	r3, r3, #32
 8003758:	6023      	str	r3, [r4, #0]
 800375a:	4833      	ldr	r0, [pc, #204]	; (8003828 <_printf_i+0x240>)
 800375c:	2778      	movs	r7, #120	; 0x78
 800375e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	6829      	ldr	r1, [r5, #0]
 8003766:	061f      	lsls	r7, r3, #24
 8003768:	f851 6b04 	ldr.w	r6, [r1], #4
 800376c:	d402      	bmi.n	8003774 <_printf_i+0x18c>
 800376e:	065f      	lsls	r7, r3, #25
 8003770:	bf48      	it	mi
 8003772:	b2b6      	uxthmi	r6, r6
 8003774:	07df      	lsls	r7, r3, #31
 8003776:	bf48      	it	mi
 8003778:	f043 0320 	orrmi.w	r3, r3, #32
 800377c:	6029      	str	r1, [r5, #0]
 800377e:	bf48      	it	mi
 8003780:	6023      	strmi	r3, [r4, #0]
 8003782:	b91e      	cbnz	r6, 800378c <_printf_i+0x1a4>
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	f023 0320 	bic.w	r3, r3, #32
 800378a:	6023      	str	r3, [r4, #0]
 800378c:	2310      	movs	r3, #16
 800378e:	e7a7      	b.n	80036e0 <_printf_i+0xf8>
 8003790:	4824      	ldr	r0, [pc, #144]	; (8003824 <_printf_i+0x23c>)
 8003792:	e7e4      	b.n	800375e <_printf_i+0x176>
 8003794:	4615      	mov	r5, r2
 8003796:	e7bd      	b.n	8003714 <_printf_i+0x12c>
 8003798:	682b      	ldr	r3, [r5, #0]
 800379a:	6826      	ldr	r6, [r4, #0]
 800379c:	6961      	ldr	r1, [r4, #20]
 800379e:	1d18      	adds	r0, r3, #4
 80037a0:	6028      	str	r0, [r5, #0]
 80037a2:	0635      	lsls	r5, r6, #24
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	d501      	bpl.n	80037ac <_printf_i+0x1c4>
 80037a8:	6019      	str	r1, [r3, #0]
 80037aa:	e002      	b.n	80037b2 <_printf_i+0x1ca>
 80037ac:	0670      	lsls	r0, r6, #25
 80037ae:	d5fb      	bpl.n	80037a8 <_printf_i+0x1c0>
 80037b0:	8019      	strh	r1, [r3, #0]
 80037b2:	2300      	movs	r3, #0
 80037b4:	6123      	str	r3, [r4, #16]
 80037b6:	4615      	mov	r5, r2
 80037b8:	e7bc      	b.n	8003734 <_printf_i+0x14c>
 80037ba:	682b      	ldr	r3, [r5, #0]
 80037bc:	1d1a      	adds	r2, r3, #4
 80037be:	602a      	str	r2, [r5, #0]
 80037c0:	681d      	ldr	r5, [r3, #0]
 80037c2:	6862      	ldr	r2, [r4, #4]
 80037c4:	2100      	movs	r1, #0
 80037c6:	4628      	mov	r0, r5
 80037c8:	f7fc fd0a 	bl	80001e0 <memchr>
 80037cc:	b108      	cbz	r0, 80037d2 <_printf_i+0x1ea>
 80037ce:	1b40      	subs	r0, r0, r5
 80037d0:	6060      	str	r0, [r4, #4]
 80037d2:	6863      	ldr	r3, [r4, #4]
 80037d4:	6123      	str	r3, [r4, #16]
 80037d6:	2300      	movs	r3, #0
 80037d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037dc:	e7aa      	b.n	8003734 <_printf_i+0x14c>
 80037de:	6923      	ldr	r3, [r4, #16]
 80037e0:	462a      	mov	r2, r5
 80037e2:	4649      	mov	r1, r9
 80037e4:	4640      	mov	r0, r8
 80037e6:	47d0      	blx	sl
 80037e8:	3001      	adds	r0, #1
 80037ea:	d0ad      	beq.n	8003748 <_printf_i+0x160>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	079b      	lsls	r3, r3, #30
 80037f0:	d413      	bmi.n	800381a <_printf_i+0x232>
 80037f2:	68e0      	ldr	r0, [r4, #12]
 80037f4:	9b03      	ldr	r3, [sp, #12]
 80037f6:	4298      	cmp	r0, r3
 80037f8:	bfb8      	it	lt
 80037fa:	4618      	movlt	r0, r3
 80037fc:	e7a6      	b.n	800374c <_printf_i+0x164>
 80037fe:	2301      	movs	r3, #1
 8003800:	4632      	mov	r2, r6
 8003802:	4649      	mov	r1, r9
 8003804:	4640      	mov	r0, r8
 8003806:	47d0      	blx	sl
 8003808:	3001      	adds	r0, #1
 800380a:	d09d      	beq.n	8003748 <_printf_i+0x160>
 800380c:	3501      	adds	r5, #1
 800380e:	68e3      	ldr	r3, [r4, #12]
 8003810:	9903      	ldr	r1, [sp, #12]
 8003812:	1a5b      	subs	r3, r3, r1
 8003814:	42ab      	cmp	r3, r5
 8003816:	dcf2      	bgt.n	80037fe <_printf_i+0x216>
 8003818:	e7eb      	b.n	80037f2 <_printf_i+0x20a>
 800381a:	2500      	movs	r5, #0
 800381c:	f104 0619 	add.w	r6, r4, #25
 8003820:	e7f5      	b.n	800380e <_printf_i+0x226>
 8003822:	bf00      	nop
 8003824:	0800397d 	.word	0x0800397d
 8003828:	0800398e 	.word	0x0800398e

0800382c <memmove>:
 800382c:	4288      	cmp	r0, r1
 800382e:	b510      	push	{r4, lr}
 8003830:	eb01 0402 	add.w	r4, r1, r2
 8003834:	d902      	bls.n	800383c <memmove+0x10>
 8003836:	4284      	cmp	r4, r0
 8003838:	4623      	mov	r3, r4
 800383a:	d807      	bhi.n	800384c <memmove+0x20>
 800383c:	1e43      	subs	r3, r0, #1
 800383e:	42a1      	cmp	r1, r4
 8003840:	d008      	beq.n	8003854 <memmove+0x28>
 8003842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003846:	f803 2f01 	strb.w	r2, [r3, #1]!
 800384a:	e7f8      	b.n	800383e <memmove+0x12>
 800384c:	4402      	add	r2, r0
 800384e:	4601      	mov	r1, r0
 8003850:	428a      	cmp	r2, r1
 8003852:	d100      	bne.n	8003856 <memmove+0x2a>
 8003854:	bd10      	pop	{r4, pc}
 8003856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800385a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800385e:	e7f7      	b.n	8003850 <memmove+0x24>

08003860 <_sbrk_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	4d06      	ldr	r5, [pc, #24]	; (800387c <_sbrk_r+0x1c>)
 8003864:	2300      	movs	r3, #0
 8003866:	4604      	mov	r4, r0
 8003868:	4608      	mov	r0, r1
 800386a:	602b      	str	r3, [r5, #0]
 800386c:	f7fd fad4 	bl	8000e18 <_sbrk>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d102      	bne.n	800387a <_sbrk_r+0x1a>
 8003874:	682b      	ldr	r3, [r5, #0]
 8003876:	b103      	cbz	r3, 800387a <_sbrk_r+0x1a>
 8003878:	6023      	str	r3, [r4, #0]
 800387a:	bd38      	pop	{r3, r4, r5, pc}
 800387c:	20000330 	.word	0x20000330

08003880 <memcpy>:
 8003880:	440a      	add	r2, r1
 8003882:	4291      	cmp	r1, r2
 8003884:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003888:	d100      	bne.n	800388c <memcpy+0xc>
 800388a:	4770      	bx	lr
 800388c:	b510      	push	{r4, lr}
 800388e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003896:	4291      	cmp	r1, r2
 8003898:	d1f9      	bne.n	800388e <memcpy+0xe>
 800389a:	bd10      	pop	{r4, pc}

0800389c <_realloc_r>:
 800389c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a0:	4680      	mov	r8, r0
 80038a2:	4614      	mov	r4, r2
 80038a4:	460e      	mov	r6, r1
 80038a6:	b921      	cbnz	r1, 80038b2 <_realloc_r+0x16>
 80038a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038ac:	4611      	mov	r1, r2
 80038ae:	f7ff bc49 	b.w	8003144 <_malloc_r>
 80038b2:	b92a      	cbnz	r2, 80038c0 <_realloc_r+0x24>
 80038b4:	f7ff fbda 	bl	800306c <_free_r>
 80038b8:	4625      	mov	r5, r4
 80038ba:	4628      	mov	r0, r5
 80038bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c0:	f000 f81b 	bl	80038fa <_malloc_usable_size_r>
 80038c4:	4284      	cmp	r4, r0
 80038c6:	4607      	mov	r7, r0
 80038c8:	d802      	bhi.n	80038d0 <_realloc_r+0x34>
 80038ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80038ce:	d812      	bhi.n	80038f6 <_realloc_r+0x5a>
 80038d0:	4621      	mov	r1, r4
 80038d2:	4640      	mov	r0, r8
 80038d4:	f7ff fc36 	bl	8003144 <_malloc_r>
 80038d8:	4605      	mov	r5, r0
 80038da:	2800      	cmp	r0, #0
 80038dc:	d0ed      	beq.n	80038ba <_realloc_r+0x1e>
 80038de:	42bc      	cmp	r4, r7
 80038e0:	4622      	mov	r2, r4
 80038e2:	4631      	mov	r1, r6
 80038e4:	bf28      	it	cs
 80038e6:	463a      	movcs	r2, r7
 80038e8:	f7ff ffca 	bl	8003880 <memcpy>
 80038ec:	4631      	mov	r1, r6
 80038ee:	4640      	mov	r0, r8
 80038f0:	f7ff fbbc 	bl	800306c <_free_r>
 80038f4:	e7e1      	b.n	80038ba <_realloc_r+0x1e>
 80038f6:	4635      	mov	r5, r6
 80038f8:	e7df      	b.n	80038ba <_realloc_r+0x1e>

080038fa <_malloc_usable_size_r>:
 80038fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038fe:	1f18      	subs	r0, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	bfbc      	itt	lt
 8003904:	580b      	ldrlt	r3, [r1, r0]
 8003906:	18c0      	addlt	r0, r0, r3
 8003908:	4770      	bx	lr
	...

0800390c <_init>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr

08003918 <_fini>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr
